{"parents": [], "prev": null, "next": null, "title": "Package Project Structure", "meta": {}, "body": "<section id=\"package-project-structure\">\n<h1>Package Project Structure<a class=\"headerlink\" href=\"#package-project-structure\" title=\"Permalink to this heading\">#</a></h1>\n<p>Your main implementation lives in the  <code class=\"docutils literal notranslate\"><span class=\"pre\">src/api.py</span></code> file of your project.\nThis file will have been created for you by the template you selected when starting your project.</p>\n<ul class=\"simple\">\n<li><p>If you are developing a package, you will find a class that derives from the <code class=\"docutils literal notranslate\"><span class=\"pre\">PackageService</span></code> base class</p></li>\n<li><p>If you are developing a plugin, you will find a class that derives from a base class specific to the plugin type.</p></li>\n</ul>\n<p>From the implementation perspective, think of a package as a Flask app.\nIt looks and feels like a regular Python class,\nbut its methods are decorated with decorators bind them to HTTP endpoints.\nYou can call instances of your package over HTTP, or you can use a Steamship client library wrapper.</p>\n<p>Consider the following package:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyPackage</span><span class=\"p\">(</span><span class=\"n\">PackageService</span><span class=\"p\">):</span>\n    <span class=\"nd\">@get</span><span class=\"p\">(</span><span class=\"s2\">&quot;say_hello&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_method_name_need_not_match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Hello, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@post</span><span class=\"p\">(</span><span class=\"s2\">&quot;do_something&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">:</span> <span class=\"n\">number</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>Once deployed to Steamship, every new instance of this package would be associated with two HTTP endpoints:</p>\n<ul class=\"simple\">\n<li><p>Expose an HTTP GET endpoint at <code class=\"docutils literal notranslate\"><span class=\"pre\">/say_hello</span></code> that accepts a URL Querystring argument named <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> and returns a string response</p></li>\n<li><p>Expose an HTTP POST endpoint at <code class=\"docutils literal notranslate\"><span class=\"pre\">/do_something</span></code> that accepts a random number and returns it in a JSON object</p></li>\n</ul>\n<p>These per-instance endpoints could also be called using convenience functions in the Steamship Python client:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Create or reuse an instance of the package</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">Steamship</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"s2\">&quot;my-package&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;instance-id&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Invoke the methods</span>\n<span class=\"n\">hello_resp</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"s2\">&quot;say_hello&quot;</span><span class=\"p\">,</span> <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Ted&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">do_resp</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"s2\">&quot;do_something&quot;</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>A few rules about writing package methods:</p>\n<ul class=\"simple\">\n<li><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;get</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;post</span></code> decorators declare HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> endpoints, respectively</p></li>\n<li><p>All method arguments <strong>must be</strong> kwargs with defaults</p></li>\n<li><p>The method\u2019s kwargs will be supplied by merging URL query parameters, form-encoded POST data, and JSON-encoded POST data.</p></li>\n<li><p>Binary input isn\u2019t yet supported. (Email us at <a class=\"reference external\" href=\"mailto:hello&#37;&#52;&#48;steamship&#46;com\">hello<span>&#64;</span>steamship<span>&#46;</span>com</a> for workarounds if you need one).</p></li>\n<li><p>All methods must return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object</p></li>\n</ul>\n<p>For more examples of writing package endpoints, see the <a class=\"reference external\" href=\"https://github.com/steamship-core/python-client/blob/main/tests/assets/apps/demo_app.py\">example app</a> from our unit testing suite.</p>\n<p>You can also <a class=\"reference internal\" href=\"../../../developing/configuration/#id1\"><span class=\"std std-ref\">define configuration parameters</span></a> for your package.</p>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "packages/developing/project-structure.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Package Project Structure</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "packages/developing/project-structure", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}