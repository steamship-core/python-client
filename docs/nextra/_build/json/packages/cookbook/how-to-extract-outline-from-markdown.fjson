{"parents": [], "prev": null, "next": null, "title": "Extract an Outline from a Markdown File", "meta": null, "body": "<section id=\"extract-an-outline-from-a-markdown-file\">\n<h1>Extract an Outline from a Markdown File<a class=\"headerlink\" href=\"#extract-an-outline-from-a-markdown-file\" title=\"Permalink to this heading\">#</a></h1>\n<p>Accept a Markdown file from the remote user, convert it to text blocks using the Markdown Blockifier plugin, and then\ngenerate an outline for the text using the tags. For example, the following Markdown file:</p>\n<div class=\"highlight-markdown notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gh\"># This is an h1</span>\n\nAnd some content\n\n<span class=\"gu\">## This is an h2</span>\n\nand some more content\n</pre></div>\n</div>\n<p>would generate the following output:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>This is an h1\n    This is an h2\n</pre></div>\n</div>\n<p>Implementation:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This package accepts a Markdown file, extracts its text blocks</span>\n<span class=\"sd\">with a Blockifier, and returns the outline of the content.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Type</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">MimeTypes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span><span class=\"p\">,</span> <span class=\"n\">DocTag</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">create_handler</span><span class=\"p\">,</span> <span class=\"n\">post</span><span class=\"p\">,</span> <span class=\"n\">PackageService</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MarkdownOutlinePackage</span><span class=\"p\">(</span><span class=\"n\">PackageService</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># This method defines the package user&#39;s endpoint. The @post annotation</span>\n    <span class=\"c1\"># automatically makes the method available as an HTTP Post request.</span>\n    <span class=\"c1\"># The name in the annotation defines the HTTP route suffix,</span>\n    <span class=\"c1\">#  see Packages -&gt; Package Project Structure.</span>\n    <span class=\"nd\">@post</span><span class=\"p\">(</span><span class=\"s2\">&quot;create_markdown_outline&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_markdown_outline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Accept markdown content and extract its outline&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Upload the content of the Markdown file into Steamship.</span>\n        <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">MKD</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Now blockify it (convert it to raw text with tags) with the markdown blockifier</span>\n        <span class=\"n\">blockifier</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">use_plugin</span><span class=\"p\">(</span>\n            <span class=\"n\">plugin_handle</span><span class=\"o\">=</span><span class=\"s2\">&quot;markdown-blockifier-default&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">instance_handle</span><span class=\"o\">=</span><span class=\"s2\">&quot;my-blockifier&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">blockify</span><span class=\"p\">(</span><span class=\"n\">blockifier</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Using a plugin is an asynchronous call within Steamship. Here we</span>\n        <span class=\"c1\"># assume the file is relatively short and this operation won&#39;t</span>\n        <span class=\"c1\"># take long, so we just wait on it within the call to the package.</span>\n        <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Calling file.refresh gets us the blockified results. We expect</span>\n        <span class=\"c1\"># one block for each element of Markdown, with a Tag telling us</span>\n        <span class=\"c1\"># what element type it is.</span>\n        <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Now we build the outline.  We loop through the result blocks,</span>\n        <span class=\"c1\"># keeping those tagged as h[1-6].</span>\n        <span class=\"n\">result_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">block</span> <span class=\"ow\">in</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">block</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">DOCUMENT</span> <span class=\"ow\">and</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"p\">[</span>\n                    <span class=\"n\">DocTag</span><span class=\"o\">.</span><span class=\"n\">H1</span><span class=\"p\">,</span>\n                    <span class=\"n\">DocTag</span><span class=\"o\">.</span><span class=\"n\">H2</span><span class=\"p\">,</span>\n                    <span class=\"n\">DocTag</span><span class=\"o\">.</span><span class=\"n\">H3</span><span class=\"p\">,</span>\n                    <span class=\"n\">DocTag</span><span class=\"o\">.</span><span class=\"n\">H4</span><span class=\"p\">,</span>\n                    <span class=\"n\">DocTag</span><span class=\"o\">.</span><span class=\"n\">H5</span>\n                <span class=\"p\">]:</span>\n                    <span class=\"c1\"># Grab the numerical part of the header level, ex. 2 in &quot;h2&quot;</span>\n                    <span class=\"n\">heading_level</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n\n                    <span class=\"c1\"># Create indent with one fewer tab than heading level</span>\n                    <span class=\"n\">heading_prefix</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">heading_level</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n                    <span class=\"c1\"># Append the block to the result, with the indent</span>\n                    <span class=\"n\">result_lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">heading_prefix</span><span class=\"si\">}{</span><span class=\"n\">block</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Return the joined result</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">result_lines</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># This line connects our Package implementation class to the surrounding</span>\n<span class=\"c1\"># Steamship handler code.</span>\n<span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">create_handler</span><span class=\"p\">(</span><span class=\"n\">MarkdownOutlinePackage</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "packages/cookbook/how-to-extract-outline-from-markdown.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Extract an Outline from a Markdown File</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "packages/cookbook/how-to-extract-outline-from-markdown", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}