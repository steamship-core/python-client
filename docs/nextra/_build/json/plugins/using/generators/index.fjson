{"parents": [{"link": "../../", "title": "Plugins"}, {"link": "../", "title": "Using Plugins"}], "prev": {"link": "../taggers/", "title": "Taggers"}, "next": {"link": "dalle/", "title": "DALL-E"}, "title": "Generators", "meta": null, "body": "<section id=\"generators\">\n<span id=\"id1\"></span><h1>Generators<a class=\"headerlink\" href=\"#generators\" title=\"Permalink to this heading\">#</a></h1>\n<p>Generators create more <a class=\"reference internal\" href=\"../../../data/blocks/#blocks\"><span class=\"std std-ref\">Blocks</span></a> (content) on a <a class=\"reference internal\" href=\"../../../data/files/#files\"><span class=\"std std-ref\">File</span></a>.</p>\n<section id=\"using-generators\">\n<h2>Using Generators<a class=\"headerlink\" href=\"#using-generators\" title=\"Permalink to this heading\">#</a></h2>\n<p>To use a generator, create an instance within your workspace and then invoke it.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Steamship</span><span class=\"p\">,</span> <span class=\"n\">File</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Steamship</span><span class=\"p\">(</span><span class=\"n\">workspace</span><span class=\"o\">=</span><span class=\"s2\">&quot;my-workspace-handle&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the generator instance</span>\n<span class=\"n\">generator</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">use_plugin</span><span class=\"p\">(</span><span class=\"s1\">&#39;generator-handle&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Apply the generator to some text</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;some text&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n<span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n</pre></div>\n</div>\n</section>\n<section id=\"input\">\n<h2>Input<a class=\"headerlink\" href=\"#input\" title=\"Permalink to this heading\">#</a></h2>\n<p>There are several ways to specify input to a <code class=\"docutils literal notranslate\"><span class=\"pre\">Generator</span></code>:</p>\n<p><strong>Raw Text</strong> You can pass raw text directly to a generator:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;some text&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><strong>Blocks of an existing File</strong> You can pass the generator a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> id to work on, optionally passing a subset of blocks:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Pass all the Blocks in the File</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">input_file_id</span><span class=\"o\">=</span><span class=\"n\">my_file</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Pass some of the Blocks in the File</span>\n<span class=\"c1\"># in this example the second and third blocks (zero-indexed)</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">input_file_id</span><span class=\"o\">=</span><span class=\"n\">my_file</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">input_file_start_block_index</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">input_file_end_block_index</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Pass in specific blocks from the file</span>\n<span class=\"c1\"># in this example the third and fifth (zero-indexed)</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">input_file_id</span><span class=\"o\">=</span><span class=\"n\">my_file</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">input_file_block_index_list</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p><strong>A query for existing Blocks</strong> You can pass the generator a <a class=\"reference internal\" href=\"../../../data/queries/#queries\"><span class=\"std std-ref\">query</span></a> that will produce <code class=\"docutils literal notranslate\"><span class=\"pre\">Blocks</span></code> for the <code class=\"docutils literal notranslate\"><span class=\"pre\">Generator</span></code>.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Pass all the Blocks in the File</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">block_query</span><span class=\"o\">=</span><span class=\"s1\">&#39;kind &quot;some-relevant-tag-kind&quot;&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><strong>Public output</strong> If you wish to make the output of the generation public (for example an image or audio file), you can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">make_output_public</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> to the call to <code class=\"docutils literal notranslate\"><span class=\"pre\">generate</span></code>.</p>\n</section>\n<section id=\"output\">\n<h2>Output<a class=\"headerlink\" href=\"#output\" title=\"Permalink to this heading\">#</a></h2>\n<p>When you call <code class=\"docutils literal notranslate\"><span class=\"pre\">generate</span></code> on a file or via a <code class=\"docutils literal notranslate\"><span class=\"pre\">PluginInstance</span></code>, the object that is returned is a <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code>. You can <code class=\"docutils literal notranslate\"><span class=\"pre\">wait()</span></code> on\nthis task, or continue on to do other work.\nThe output to a <code class=\"docutils literal notranslate\"><span class=\"pre\">generate</span></code> operation is <a class=\"reference internal\" href=\"../../../data/blocks/#blocks\"><span class=\"std std-ref\">Blocks</span></a>. You can always get these blocks from the output of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Apply the generator to some text</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;some text&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n<span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n</pre></div>\n</div>\n<p>By default, this output is <strong>not</strong> saved to a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code>.  If you wish the result to be persisted,\nyou can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">append_output_to_file=True</span></code> to the call, and it will be persisted to a <strong>new</strong> <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code>:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Apply the generator to some text</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;some text&quot;</span><span class=\"p\">,</span> <span class=\"n\">append_output_to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n<span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n<span class=\"n\">new_file_id</span> <span class=\"o\">=</span> <span class=\"n\">blocks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">file_id</span>\n</pre></div>\n</div>\n<p>If you want the output to be appended to an existing <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code>, just pass its id as well:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Apply the generator to some text</span>\n<span class=\"n\">generator_task</span> <span class=\"o\">=</span> <span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;some text&quot;</span><span class=\"p\">,</span> <span class=\"n\">append_output_to_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">output_file_id</span><span class=\"o\">=</span><span class=\"n\">my_file</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n<span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"n\">generator_task</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">blocks</span>\n\n<span class=\"c1\"># if we refresh my_file, we will see new blocks</span>\n<span class=\"n\">my_file</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Steamship provides several Generators:</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"dalle/\">DALL-E</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"gpt4/\">GPT-4</a></li>\n</ul>\n</div>\n<p>Other generators are available on the Steamship <a class=\"reference external\" href=\"https://www.steamship.com/plugins?tab=Public\">plugins page</a></p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["plugins/using/generators/dalle", "DALL-E", "N", "next"], ["plugins/using/taggers/index", "Taggers", "P", "previous"]], "sourcename": "plugins/using/generators/index.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Generators</a><ul>\n<li><a class=\"reference internal\" href=\"#using-generators\">Using Generators</a></li>\n<li><a class=\"reference internal\" href=\"#input\">Input</a></li>\n<li><a class=\"reference internal\" href=\"#output\">Output</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "plugins/using/generators/index", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}