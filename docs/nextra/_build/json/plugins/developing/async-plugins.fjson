{"parents": [{"link": "../../", "title": "Plugins"}, {"link": "../", "title": "Developing Plugins"}], "prev": {"link": "../embedders/", "title": "Developing Embedders"}, "next": {"link": "../../../data/", "title": "Data Model"}, "title": "Writing Asynchronous Plugins", "meta": null, "body": "<section id=\"writing-asynchronous-plugins\">\n<span id=\"developingasync\"></span><h1>Writing Asynchronous Plugins<a class=\"headerlink\" href=\"#writing-asynchronous-plugins\" title=\"Permalink to this heading\">#</a></h1>\n<p>If a plugin method calls a third-party API that is asynchronous, then that plugin should\nadopt an asynchronous conversation with the Steamship Engine.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">Request[InputType]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Response[OutputType]</span></code> objects passed into and returned from plugin invocations contain\nfields that make such an asynchronous conversation quick and easy.</p>\n<section id=\"signaling-an-asynchronous-response\">\n<h2>Signaling an Asynchronous Response<a class=\"headerlink\" href=\"#signaling-an-asynchronous-response\" title=\"Permalink to this heading\">#</a></h2>\n<p>A synchronous plugin method response always returns either a raw object or a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object\nwrapping a raw object:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">SomePlugin</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">some_object</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To make this response asynchronous, return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object with the <code class=\"docutils literal notranslate\"><span class=\"pre\">status</span></code> field set to a\nrunning <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code> object:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">SomePlugin</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n      <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span>\n          <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">Task</span><span class=\"p\">(</span>\n             <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">running</span><span class=\"p\">,</span>\n             <span class=\"n\">remote_status_input</span><span class=\"o\">=</span><span class=\"p\">{}</span>\n          <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>That will cause the Steamship Engine to record the plugin\u2019s work as still <code class=\"docutils literal notranslate\"><span class=\"pre\">RUNNING</span></code>. It will schedule repeated\ninquiries \u2013 at increasingly longer intervals \u2013 to check on whether the plugin invocation has.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">remote_status_input</span></code> object on the returned <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code> contains a Python <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> that will be provided to the\nplugin when this future check occurs.\nIt is the appropriate location to stash metadata about the async work in progress, such as a task ID received from a third-party API.</p>\n</section>\n<section id=\"detecting-an-asynchronous-progress-request\">\n<h2>Detecting an Asynchronous Progress Request<a class=\"headerlink\" href=\"#detecting-an-asynchronous-progress-request\" title=\"Permalink to this heading\">#</a></h2>\n<p>When a plugin responds with an asyncronous task, the Engine will begin checking back for status updates.\nThe Engine performs these checks via the same endpoints used to initiate the work.\nIt is therefore important for asynchronous plugins to be able to distinguish between invocations requesting new work and invocations checking on existing work.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Request</span></code> object contains a boolean field named <code class=\"docutils literal notranslate\"><span class=\"pre\">is_status_check</span></code> that distinguishes async status requests from new work requests.\nIf this field is <code class=\"docutils literal notranslate\"><span class=\"pre\">true</span></code>, the request is checking the status of prior work.\nIf this field is <code class=\"docutils literal notranslate\"><span class=\"pre\">false</span></code>, the request is initiating new work.</p>\n<p>In a fully synchronous plugin method, it is generally safe to ignore the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_status_check</span></code> field,\nbut if a plugin method is asynchronous, you must take care to always check it, like so:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">InputType</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">OutputType</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">[</span><span class=\"n\">OutputType</span><span class=\"p\">]]:</span>\n\n   <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">is_status_check</span><span class=\"p\">:</span>\n       <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_status</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n       <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initiate_work</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In the above code, the <code class=\"docutils literal notranslate\"><span class=\"pre\">initiate_work</span></code> method would return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code> in the running\nstate with a useful <code class=\"docutils literal notranslate\"><span class=\"pre\">remote_status_input</span></code> field, as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">initiate_work</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">InputType</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">OutputType</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">[</span><span class=\"n\">OutputType</span><span class=\"p\">]]:</span>\n\n     <span class=\"n\">remote_job_id</span> <span class=\"o\">=</span> <span class=\"n\">api_client</span><span class=\"o\">.</span><span class=\"n\">do_something</span><span class=\"p\">(</span>\n       <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n     <span class=\"p\">)</span>\n\n     <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span>\n         <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">Task</span><span class=\"p\">(</span>\n            <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">RUNNING</span><span class=\"p\">,</span>\n            <span class=\"n\">remote_status_input</span><span class=\"o\">=</span><span class=\"p\">{</span>\n              <span class=\"s2\">&quot;remote_job_id&quot;</span><span class=\"p\">:</span> <span class=\"n\">remote_job_id</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">)</span>\n     <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>And then the <code class=\"docutils literal notranslate\"><span class=\"pre\">check_status</span></code> method would retrieve the <code class=\"docutils literal notranslate\"><span class=\"pre\">remote_status_input</span></code> to check\non the status of the remote work.\nIf the work remains in progress, it responds with a task in the running state, just as before.\nIf the work is complete, it responds with the raw data object or a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object wrapping it.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">check_status</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">InputType</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">BlockAndTagPluginOutput</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">[</span><span class=\"n\">OutputType</span><span class=\"p\">]]:</span>\n\n     <span class=\"c1\"># Fetch the key we know we set when backgrounding the task.</span>\n     <span class=\"n\">remote_job_id</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">remote_status_input</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;remote_job_id&quot;</span><span class=\"p\">)</span>\n\n     <span class=\"k\">if</span> <span class=\"n\">api_client</span><span class=\"o\">.</span><span class=\"n\">is_complete</span><span class=\"p\">(</span><span class=\"n\">remote_job_id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">some_output_object</span><span class=\"p\">)</span>\n     <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">Response</span><span class=\"p\">(</span>\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">Task</span><span class=\"p\">(</span>\n               <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">RUNNING</span><span class=\"p\">,</span>\n               <span class=\"n\">remote_status_input</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                 <span class=\"s2\">&quot;remote_job_id&quot;</span><span class=\"p\">:</span> <span class=\"n\">remote_job_id</span>\n               <span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n<section id=\"throwing-errors-from-an-asynchronous-plugin\">\n<h2>Throwing errors from an asynchronous plugin<a class=\"headerlink\" href=\"#throwing-errors-from-an-asynchronous-plugin\" title=\"Permalink to this heading\">#</a></h2>\n<p>Errors can be thrown from an asynchronous plugin just as they would be from a synchronous plugin.\nJust raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">SteamshipError</span></code> and the Engine will set the task\u2019s state to <code class=\"docutils literal notranslate\"><span class=\"pre\">TaskState.FAILED</span></code> and record the error output.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n   <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Some error message&quot;</span><span class=\"p\">,</span>\n   <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">optional_wrapped_error</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["data/index", "Data Model", "N", "next"], ["plugins/developing/embedders", "Developing Embedders", "P", "previous"]], "sourcename": "plugins/developing/async-plugins.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing Asynchronous Plugins</a><ul>\n<li><a class=\"reference internal\" href=\"#signaling-an-asynchronous-response\">Signaling an Asynchronous Response</a></li>\n<li><a class=\"reference internal\" href=\"#detecting-an-asynchronous-progress-request\">Detecting an Asynchronous Progress Request</a></li>\n<li><a class=\"reference internal\" href=\"#throwing-errors-from-an-asynchronous-plugin\">Throwing errors from an asynchronous plugin</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "plugins/developing/async-plugins", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}