{"parents": [{"link": "../../", "title": "Plugins"}, {"link": "../", "title": "Developing Plugins"}], "prev": {"link": "../importers/", "title": "Developing File Importers"}, "next": {"link": "../generators/", "title": "Developing Generators"}, "title": "Developing Blockifiers", "meta": null, "body": "<section id=\"developing-blockifiers\">\n<span id=\"developingblockifierssec\"></span><h1>Developing Blockifiers<a class=\"headerlink\" href=\"#developing-blockifiers\" title=\"Permalink to this heading\">#</a></h1>\n<p>To develop a blockifier, first follow the instructions in <a class=\"reference internal\" href=\"../#developingpluginssec\"><span class=\"std std-ref\">Developing Plugins</span></a> to create\na new plugin project. This will result in a full, working plugin scaffold that you could\ndeploy and use immediately.</p>\n<p>Then, read below details about how to modify that scaffold for your own needs.</p>\n<section id=\"the-blockifier-contract\">\n<h2>The Blockifier Contract<a class=\"headerlink\" href=\"#the-blockifier-contract\" title=\"Permalink to this heading\">#</a></h2>\n<p>Blockifiers are responsible for transforming raw data into Steamship Block Format.\nUsing our SDK, that means implementing the following method:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyBlockifier</span><span class=\"p\">(</span><span class=\"n\">Blockifier</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span>\n       <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">RawDataPluginInput</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n       <span class=\"n\">Response</span><span class=\"p\">,</span>\n       <span class=\"n\">Response</span><span class=\"p\">[</span><span class=\"n\">BlockAndTagPluginOutput</span><span class=\"p\">]</span>\n    <span class=\"p\">]:</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n</section>\n<section id=\"how-to-structure-blocks-and-tags\">\n<h2>How to Structure Blocks and Tags<a class=\"headerlink\" href=\"#how-to-structure-blocks-and-tags\" title=\"Permalink to this heading\">#</a></h2>\n<p>The biggest design question you will face when implementing a blockifier is how to structure your blocks and tags.</p>\n<p>At the platform level, we leave this open-ended on purpose, but we do encourage a few conventions of common convergence.</p>\n<p>See the <a class=\"reference internal\" href=\"../../../data/#data-model\"><span class=\"std std-ref\">Data Model</span></a> section for a discussion of how to think effectively about blocks and tags.</p>\n</section>\n<section id=\"synchronous-example-a-pseudo-markdown-blockifier\">\n<h2>Synchronous Example: A Pseudo-Markdown Blockifier<a class=\"headerlink\" href=\"#synchronous-example-a-pseudo-markdown-blockifier\" title=\"Permalink to this heading\">#</a></h2>\n<p>A trivial implementation of this contract would be a pseudo-Markdown blockifier.</p>\n<p>Let\u2019s say this blockifier assumes the input data is UTF-8, assumes that empty new lines represent paragraph breaks.\nYou could implement such a blockifier with this following code:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">PretendMarkdownBlockifier</span><span class=\"p\">(</span><span class=\"n\">Blockifier</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">RawDataPluginInput</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">BlockAndTagPluginOutput</span><span class=\"p\">],</span> <span class=\"n\">BlockAndTagPluginOutput</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># Grab the raw bytes.</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n        <span class=\"c1\"># Decode it as UTF-8</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n            <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n\n       <span class=\"c1\"># Split it into paragraphs based on a double newline</span>\n       <span class=\"n\">paragraphs</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n       <span class=\"c1\"># Create a block for each paragraph and add a tag marking it as a paragraph</span>\n       <span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n         <span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">CreateRequest</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">paragraph</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span>\n             <span class=\"n\">Tag</span><span class=\"o\">.</span><span class=\"n\">CreateRequest</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;my-plugin&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;paragraph&quot;</span><span class=\"p\">)</span>\n         <span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">paragraph</span> <span class=\"ow\">in</span> <span class=\"n\">paragraphs</span>\n       <span class=\"p\">]</span>\n\n       <span class=\"c1\"># Return a BlockAndTagPluginOutput object</span>\n       <span class=\"k\">return</span> <span class=\"n\">BlockAndTagPluginOutput</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">CreateRequest</span><span class=\"p\">(</span><span class=\"n\">blocks</span><span class=\"o\">=</span><span class=\"n\">blocks</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>From the standpoint of the Steamship Engine, this <code class=\"docutils literal notranslate\"><span class=\"pre\">PretendMarkdownBlockifier</span></code> now provides a way to\ntransform any bytes claiming to be of this pseudo-markdown type into Steamship Block Format.</p>\n</section>\n<section id=\"asynchronous-blockifiers\">\n<h2>Asynchronous Blockifiers<a class=\"headerlink\" href=\"#asynchronous-blockifiers\" title=\"Permalink to this heading\">#</a></h2>\n<p>Some blockifiers will need to call third-party APIs that are asynchronous.\nImage-to-text (OCR) and speech-to-text (S2T) are two common examples.\nWhen this occurs, you should make your blockifier asynchronous as well.</p>\n<p>See the <a class=\"reference internal\" href=\"../async-plugins/#developingasync\"><span class=\"std std-ref\">Developing Asynchronous Plugins</span></a> section for details.</p>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["plugins/developing/generators", "Developing Generators", "N", "next"], ["plugins/developing/importers", "Developing File Importers", "P", "previous"]], "sourcename": "plugins/developing/blockifiers.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Developing Blockifiers</a><ul>\n<li><a class=\"reference internal\" href=\"#the-blockifier-contract\">The Blockifier Contract</a></li>\n<li><a class=\"reference internal\" href=\"#how-to-structure-blocks-and-tags\">How to Structure Blocks and Tags</a></li>\n<li><a class=\"reference internal\" href=\"#synchronous-example-a-pseudo-markdown-blockifier\">Synchronous Example: A Pseudo-Markdown Blockifier</a></li>\n<li><a class=\"reference internal\" href=\"#asynchronous-blockifiers\">Asynchronous Blockifiers</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "plugins/developing/blockifiers", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}