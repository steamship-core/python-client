{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "steamship.agents.react.output_parser", "body": "<h1>Source code for steamship.agents.react.output_parser</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Block</span><span class=\"p\">,</span> <span class=\"n\">Steamship</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.schema</span> <span class=\"kn\">import</span> <span class=\"n\">Action</span><span class=\"p\">,</span> <span class=\"n\">AgentContext</span><span class=\"p\">,</span> <span class=\"n\">FinishAction</span><span class=\"p\">,</span> <span class=\"n\">OutputParser</span><span class=\"p\">,</span> <span class=\"n\">Tool</span>\n\n\n<div class=\"viewcode-block\" id=\"ReACTOutputParser\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.agents.react/#steamship.agents.react.output_parser.ReACTOutputParser\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ReACTOutputParser</span><span class=\"p\">(</span><span class=\"n\">OutputParser</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Parse LLM output expecting structure matching ReACTAgent default prompt.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">tools_lookup_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Tool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">tools_lookup_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">tool</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">tool</span> <span class=\"k\">for</span> <span class=\"n\">tool</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;tools&quot;</span><span class=\"p\">,</span> <span class=\"p\">[])}</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">tools_lookup_dict</span><span class=\"o\">=</span><span class=\"n\">tools_lookup_dict</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"ReACTOutputParser.parse\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.agents.react/#steamship.agents.react.output_parser.ReACTOutputParser.parse\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">AgentContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Action</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;No&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Could not parse LLM output: `</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">`&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;AI:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">text</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">FinishAction</span><span class=\"p\">(</span>\n                <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"n\">ReACTOutputParser</span><span class=\"o\">.</span><span class=\"n\">_blocks_from_text</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">),</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;Action: (.*?)[\\n]*Action Input: (.*)&quot;</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Bad agent response (</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">). Returning results directly to the user.&quot;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># TODO: should this be the case?  If we are off-base should we just return what we have?</span>\n            <span class=\"k\">return</span> <span class=\"n\">FinishAction</span><span class=\"p\">(</span>\n                <span class=\"n\">output</span><span class=\"o\">=</span><span class=\"n\">ReACTOutputParser</span><span class=\"o\">.</span><span class=\"n\">_blocks_from_text</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">),</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">action</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">action_input</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">tool</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tools_lookup_dict</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(),</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">tool</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Could not find tool from action: `</span><span class=\"si\">{</span><span class=\"n\">action</span><span class=\"si\">}</span><span class=\"s2\">`. Known tools: </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tools_lookup_dict</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Action</span><span class=\"p\">(</span>\n            <span class=\"n\">tool</span><span class=\"o\">=</span><span class=\"n\">tool</span><span class=\"p\">,</span>\n            <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">action_input</span><span class=\"p\">)],</span>\n            <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_blocks_from_text</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Steamship</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">]:</span>\n        <span class=\"n\">last_response</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;AI:&quot;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n\n        <span class=\"n\">block_id_regex</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?:\\[|\\()?Block)?\\(?([A-F0-9]</span><span class=\"si\">{8}</span><span class=\"s2\">\\-[A-F0-9]</span><span class=\"si\">{4}</span><span class=\"s2\">\\-[A-F0-9]</span><span class=\"si\">{4}</span><span class=\"s2\">\\-[A-F0-9]</span><span class=\"si\">{4}</span><span class=\"s2\">\\-[A-F0-9]</span><span class=\"si\">{12}</span><span class=\"s2\">)\\)?(?:(\\]|\\)))?&quot;</span>\n        <span class=\"n\">remaining_text</span> <span class=\"o\">=</span> <span class=\"n\">last_response</span>\n        <span class=\"n\">result_blocks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">while</span> <span class=\"n\">remaining_text</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">remaining_text</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">block_id_regex</span><span class=\"p\">,</span> <span class=\"n\">remaining_text</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n                <span class=\"n\">pre_block_text</span> <span class=\"o\">=</span> <span class=\"n\">ReACTOutputParser</span><span class=\"o\">.</span><span class=\"n\">_remove_block_prefix</span><span class=\"p\">(</span>\n                    <span class=\"n\">candidate</span><span class=\"o\">=</span><span class=\"n\">remaining_text</span><span class=\"p\">[</span><span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()]</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pre_block_text</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"n\">result_blocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">pre_block_text</span><span class=\"p\">))</span>\n                <span class=\"n\">result_blocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">_id</span><span class=\"o\">=</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n                <span class=\"n\">remaining_text</span> <span class=\"o\">=</span> <span class=\"n\">ReACTOutputParser</span><span class=\"o\">.</span><span class=\"n\">_remove_block_suffix</span><span class=\"p\">(</span>\n                    <span class=\"n\">remaining_text</span><span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"p\">:]</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result_blocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">remaining_text</span><span class=\"p\">))</span>\n                <span class=\"n\">remaining_text</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result_blocks</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_remove_block_prefix</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">candidate</span>\n        <span class=\"k\">if</span> <span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;(Block&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;[Block&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">removed</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s2\">&quot;Block&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;Block&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">removed</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"s2\">&quot;Block&quot;</span><span class=\"p\">)</span> <span class=\"p\">:]</span>\n        <span class=\"k\">return</span> <span class=\"n\">removed</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_remove_block_suffix</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n        <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">candidate</span>\n        <span class=\"k\">if</span> <span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">removed</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;]&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">removed</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"k\">return</span> <span class=\"n\">removed</span></div>\n</pre></div>", "current_page_name": "_modules/steamship/agents/react/output_parser", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}