{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "steamship.agents.functional.functions_based", "body": "<h1>Source code for steamship.agents.functional.functions_based</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Block</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.functional.output_parser</span> <span class=\"kn\">import</span> <span class=\"n\">FunctionsBasedOutputParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.schema</span> <span class=\"kn\">import</span> <span class=\"n\">Action</span><span class=\"p\">,</span> <span class=\"n\">AgentContext</span><span class=\"p\">,</span> <span class=\"n\">ChatAgent</span><span class=\"p\">,</span> <span class=\"n\">ChatLLM</span><span class=\"p\">,</span> <span class=\"n\">Tool</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.tags.tag_constants</span> <span class=\"kn\">import</span> <span class=\"n\">RoleTag</span>\n\n\n<div class=\"viewcode-block\" id=\"FunctionsBasedAgent\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.agents.functional/#steamship.agents.functional.functions_based.FunctionsBasedAgent\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FunctionsBasedAgent</span><span class=\"p\">(</span><span class=\"n\">ChatAgent</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Selects actions for AgentService based on OpenAI Function style LLM Prompting.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">PROMPT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;You are a helpful AI assistant.</span>\n\n<span class=\"s2\">NOTE: Some functions return images, video, and audio files. These multimedia files will be represented in messages as</span>\n<span class=\"s2\">UUIDs for Steamship Blocks. When responding directly to a user, you SHOULD print the Steamship Blocks for the images,</span>\n<span class=\"s2\">video, or audio as follows: `Block(UUID for the block)`.</span>\n\n<span class=\"s2\">Example response for a request that generated an image:</span>\n<span class=\"s2\">Here is the image you requested: Block(288A2CA1-4753-4298-9716-53C1E42B726B).</span>\n\n<span class=\"s2\">Only use the functions you have been provided with.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tools</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tool</span><span class=\"p\">],</span> <span class=\"n\">llm</span><span class=\"p\">:</span> <span class=\"n\">ChatLLM</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">output_parser</span><span class=\"o\">=</span><span class=\"n\">FunctionsBasedOutputParser</span><span class=\"p\">(</span><span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"n\">tools</span><span class=\"p\">),</span> <span class=\"n\">llm</span><span class=\"o\">=</span><span class=\"n\">llm</span><span class=\"p\">,</span> <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"n\">tools</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"FunctionsBasedAgent.next_action\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.agents.functional/#steamship.agents.functional.functions_based.FunctionsBasedAgent.next_action\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">next_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">AgentContext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Action</span><span class=\"p\">:</span>\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># get system messsage</span>\n        <span class=\"n\">system_message</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">PROMPT</span><span class=\"p\">)</span>\n        <span class=\"n\">system_message</span><span class=\"o\">.</span><span class=\"n\">set_chat_role</span><span class=\"p\">(</span><span class=\"n\">RoleTag</span><span class=\"o\">.</span><span class=\"n\">SYSTEM</span><span class=\"p\">)</span>\n        <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">system_message</span><span class=\"p\">)</span>\n\n        <span class=\"n\">messages_from_memory</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># get prior conversations</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">is_searchable</span><span class=\"p\">():</span>\n            <span class=\"n\">messages_from_memory</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n                <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">last_user_message</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"n\">to_ranked_blocks</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># TODO(dougreid): we need a way to threshold message inclusion, especially for small contexts</span>\n\n            <span class=\"c1\"># remove the actual prompt from the semantic search (it will be an exact match)</span>\n            <span class=\"n\">messages_from_memory</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">msg</span>\n                <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">messages_from_memory</span>\n                <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">!=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">last_user_message</span><span class=\"o\">.</span><span class=\"n\">id</span>\n            <span class=\"p\">]</span>\n\n        <span class=\"c1\"># get most recent context</span>\n        <span class=\"n\">messages_from_memory</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">select_messages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_selector</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># de-dupe the messages from memory</span>\n        <span class=\"n\">ids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">msg</span> <span class=\"ow\">in</span> <span class=\"n\">messages_from_memory</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">ids</span><span class=\"p\">:</span>\n                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n                <span class=\"n\">ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># TODO(dougreid): sort by dates? we SHOULD ensure ordering, given semantic search</span>\n\n        <span class=\"c1\"># put the user prompt in the appropriate message location</span>\n        <span class=\"c1\"># this should happen BEFORE any agent/assistant messages related to tool selection</span>\n        <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">last_user_message</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># get completed steps</span>\n        <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">completed_steps</span>\n        <span class=\"k\">for</span> <span class=\"n\">action</span> <span class=\"ow\">in</span> <span class=\"n\">actions</span><span class=\"p\">:</span>\n            <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"o\">.</span><span class=\"n\">to_chat_messages</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># call chat()</span>\n        <span class=\"n\">output_blocks</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">llm</span><span class=\"o\">.</span><span class=\"n\">chat</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"o\">=</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"n\">tools</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tools</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">output_blocks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/agents/functional/functions_based", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}