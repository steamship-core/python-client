{"parents": [{"link": "../../../../../", "title": "Module code"}], "title": "steamship.agents.mixins.transports.steamship_widget", "body": "<h1>Source code for steamship.agents.mixins.transports.steamship_widget</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Block</span><span class=\"p\">,</span> <span class=\"n\">Steamship</span><span class=\"p\">,</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.llms</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.mixins.transports.transport</span> <span class=\"kn\">import</span> <span class=\"n\">Transport</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.schema</span> <span class=\"kn\">import</span> <span class=\"n\">Agent</span><span class=\"p\">,</span> <span class=\"n\">AgentContext</span><span class=\"p\">,</span> <span class=\"n\">Metadata</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.service.agent_service</span> <span class=\"kn\">import</span> <span class=\"n\">AgentService</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.agents.utils</span> <span class=\"kn\">import</span> <span class=\"n\">with_llm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">InvocationContext</span><span class=\"p\">,</span> <span class=\"n\">post</span>\n\n<span class=\"n\">API_BASE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://api.telegram.org/bot&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"SteamshipWidgetTransport\"><a class=\"viewcode-back\" href=\"../../../../../../api/steamship.agents.mixins.transports/#steamship.agents.mixins.transports.steamship_widget.SteamshipWidgetTransport\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SteamshipWidgetTransport</span><span class=\"p\">(</span><span class=\"n\">Transport</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Experimental base class to encapsulate a Steamship web widget communication channel.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">message_output</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Steamship</span><span class=\"p\">,</span> <span class=\"n\">agent_service</span><span class=\"p\">:</span> <span class=\"n\">AgentService</span><span class=\"p\">,</span> <span class=\"n\">agent</span><span class=\"p\">:</span> <span class=\"n\">Agent</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">agent</span> <span class=\"o\">=</span> <span class=\"n\">agent</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">agent_service</span> <span class=\"o\">=</span> <span class=\"n\">agent_service</span>\n\n<div class=\"viewcode-block\" id=\"SteamshipWidgetTransport.instance_init\"><a class=\"viewcode-back\" href=\"../../../../../../api/steamship.agents.mixins.transports/#steamship.agents.mixins.transports.steamship_widget.SteamshipWidgetTransport.instance_init\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">instance_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Config</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">InvocationContext</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_instance_deinit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Unsubscribe from updates.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blocks</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">],</span> <span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Metadata</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Send a response to the client.</span>\n\n<span class=\"sd\">        TODO: Since this isn&#39;t a push, but rather an API return, we need to figure out how to model this.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"SteamshipWidgetTransport.info\"><a class=\"viewcode-back\" href=\"../../../../../../api/steamship.agents.mixins.transports/#steamship.agents.mixins.transports.steamship_widget.SteamshipWidgetTransport.info\">[docs]</a>    <span class=\"nd\">@post</span><span class=\"p\">(</span><span class=\"s2\">&quot;info&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_parse_inbound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Parses an inbound Steamship widget message.&quot;&quot;&quot;</span>\n\n        <span class=\"n\">message_text</span> <span class=\"o\">=</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;question&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">message_text</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No &#39;question&#39; found in Steamship widget message: </span><span class=\"si\">{</span><span class=\"n\">payload</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">chat_id</span> <span class=\"o\">=</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;chat_session_id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">message_id</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">())</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">message_text</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">set_chat_id</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">))</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">set_message_id</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">message_id</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<div class=\"viewcode-block\" id=\"SteamshipWidgetTransport.answer\"><a class=\"viewcode-back\" href=\"../../../../../../api/steamship.agents.mixins.transports/#steamship.agents.mixins.transports.steamship_widget.SteamshipWidgetTransport.answer\">[docs]</a>    <span class=\"nd\">@post</span><span class=\"p\">(</span><span class=\"s2\">&quot;answer&quot;</span><span class=\"p\">,</span> <span class=\"n\">public</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">answer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">payload</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Endpoint that implements the contract for Steamship embeddable chat widgets. This is a PUBLIC endpoint since these webhooks do not pass a token.&quot;&quot;&quot;</span>\n        <span class=\"n\">incoming_message</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_inbound</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">AgentContext</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">context_keys</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;chat_id&quot;</span><span class=\"p\">:</span> <span class=\"n\">incoming_message</span><span class=\"o\">.</span><span class=\"n\">chat_id</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">chat_history</span><span class=\"o\">.</span><span class=\"n\">append_user_message</span><span class=\"p\">(</span>\n            <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">incoming_message</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">incoming_message</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">emit_funcs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">save_for_emit</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Add an LLM to the context, using the Agent&#39;s if it exists.</span>\n        <span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"p\">,</span> <span class=\"s2\">&quot;llm&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"o\">.</span><span class=\"n\">llm</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">llm</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">with_llm</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">llm</span><span class=\"o\">=</span><span class=\"n\">llm</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">agent_service</span><span class=\"o\">.</span><span class=\"n\">run_agent</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">agent</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_output</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response_for_exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">incoming_message</span><span class=\"o\">.</span><span class=\"n\">chat_id</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># We don&#39;t call self.steamship_widget_transport.send because the result is the return value</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_output</span></div>\n\n<div class=\"viewcode-block\" id=\"SteamshipWidgetTransport.save_for_emit\"><a class=\"viewcode-back\" href=\"../../../../../../api/steamship.agents.mixins.transports/#steamship.agents.mixins.transports.steamship_widget.SteamshipWidgetTransport.save_for_emit\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save_for_emit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blocks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">],</span> <span class=\"n\">metadata</span><span class=\"p\">:</span> <span class=\"n\">Metadata</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_output</span> <span class=\"o\">=</span> <span class=\"n\">blocks</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/agents/mixins/transports/steamship_widget", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}