{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.invocable.invocable_response", "body": "<h1>Source code for steamship.invocable.invocable_response</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Generic</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic.generics</span> <span class=\"kn\">import</span> <span class=\"n\">GenericModel</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base</span> <span class=\"kn\">import</span> <span class=\"n\">MimeTypes</span><span class=\"p\">,</span> <span class=\"n\">SteamshipError</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">TaskState</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.error</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_ERROR_MESSAGE</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.mime_types</span> <span class=\"kn\">import</span> <span class=\"n\">ContentEncodings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.model</span> <span class=\"kn\">import</span> <span class=\"n\">CamelModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.utils.binary_utils</span> <span class=\"kn\">import</span> <span class=\"n\">flexi_create</span>\n\n\n<div class=\"viewcode-block\" id=\"Http\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable_response.Http\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Http</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n    <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"c1\"># If true, we&#39;re signaling to the Steamship Proxy that the `data` field of the SteamshipResponse object</span>\n    <span class=\"c1\"># has been wrapped in base64. In this situation, we can return the bytes within directly to the Proxy</span>\n    <span class=\"c1\"># caller without interpreting it.</span>\n    <span class=\"n\">base64_wrapped</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">headers</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></div>\n\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">&quot;T&quot;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"InvocableResponse\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable_response.InvocableResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">GenericModel</span><span class=\"p\">,</span> <span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Mirrors the Response object in the Steamship server.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Data for successful or synchronous requests.</span>\n    <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Task</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Reporting for errors and async status</span>\n    <span class=\"n\">http</span><span class=\"p\">:</span> <span class=\"n\">Http</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Additional HTTP information for Steamship Proxy (headers, etc)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Task</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">SteamshipError</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">http</span><span class=\"p\">:</span> <span class=\"n\">Http</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">json</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">_bytes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Note:</span>\n        <span class=\"c1\"># This function has to be very defensively coded since Any errors thrown here will not be returned</span>\n        <span class=\"c1\"># to the end-user via our proxy (as this is the constructor for the response itself!)</span>\n        <span class=\"k\">if</span> <span class=\"n\">http</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http</span> <span class=\"o\">=</span> <span class=\"n\">http</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http</span> <span class=\"o\">=</span> <span class=\"n\">Http</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">_bytes</span><span class=\"o\">=</span><span class=\"n\">_bytes</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"n\">mime_type</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exception within Response.__init__.&quot;</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">error</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">:</span>\n                    <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">. Also found error - unable to serialize data to response. </span><span class=\"si\">{</span><span class=\"n\">ex</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to serialize data to response. </span><span class=\"si\">{</span><span class=\"n\">ex</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to serialize data to response. </span><span class=\"si\">{</span><span class=\"n\">ex</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">error</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Handle the task provided</span>\n        <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">()</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">status</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">failed</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_message</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Status field of response should be of type Task. &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Instead was of type </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> and had value </span><span class=\"si\">{</span><span class=\"n\">status</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">error</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">failed</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_message</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_suggestion</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">suggestion</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;steamship.invocable.response - Response created with error.&quot;</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">error</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">succeeded</span>\n\n<div class=\"viewcode-block\" id=\"InvocableResponse.set_data\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable_response.InvocableResponse.set_data\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">set_data</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">json</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">_bytes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"p\">,</span> <span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">flexi_create</span><span class=\"p\">(</span>\n            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"o\">=</span><span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">_bytes</span><span class=\"o\">=</span><span class=\"n\">_bytes</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"n\">mime_type</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">headers</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">mime_type</span> <span class=\"ow\">or</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">BINARY</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">encoding</span> <span class=\"o\">==</span> <span class=\"n\">ContentEncodings</span><span class=\"o\">.</span><span class=\"n\">BASE64</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">http</span><span class=\"o\">.</span><span class=\"n\">base64_wrapped</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"InvocableResponse.error\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable_response.InvocableResponse.error\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">error</span><span class=\"p\">(</span>\n        <span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n        <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SteamshipError</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Merges a number of error channels into one unified Response object.</span>\n\n<span class=\"sd\">        Aggregates all possible messages into a single &quot; | &quot;-delimeted error message.</span>\n\n<span class=\"sd\">        If the final resulting error message is non-null, prefixes with the provided `prefix`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Use or create the return error</span>\n        <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"ow\">or</span> <span class=\"n\">SteamshipError</span><span class=\"p\">()</span>\n\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">!=</span> <span class=\"n\">DEFAULT_ERROR_MESSAGE</span><span class=\"p\">:</span>\n            <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set or append the additional message</span>\n        <span class=\"k\">if</span> <span class=\"n\">message</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">message</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n            <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set or append the exception</span>\n        <span class=\"k\">if</span> <span class=\"n\">exception</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">exception_str</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">exception</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">if</span> <span class=\"n\">exception_str</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"p\">:</span>\n                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">exception_str</span><span class=\"p\">)</span>\n\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span> <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; | &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Finally, add the prefix if requested.</span>\n        <span class=\"k\">if</span> <span class=\"n\">prefix</span> <span class=\"ow\">and</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">:</span>\n            <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">prefix</span><span class=\"si\">}{</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"o\">=</span><span class=\"n\">Http</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">code</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"InvocableResponse.from_obj\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable_response.InvocableResponse.from_obj\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_obj</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">:</span>  <span class=\"c1\"># noqa: C901</span>\n        <span class=\"k\">if</span> <span class=\"n\">obj</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Handler provided no response.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">obj</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">SteamshipError</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">SteamshipError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">_bytes</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">())</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Handler provided unknown response type: </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"InvocableResponse.post_update\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable_response.InvocableResponse.post_update\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Client</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Pushes this response object to the corresponding Task on the Steamship Engine.</span>\n\n<span class=\"sd\">        Typically apps and plugins return their results to the Engine synchronously via HTTP.</span>\n<span class=\"sd\">        But sometimes that&#39;s not practice -- for example:</span>\n\n<span class=\"sd\">        - Microsoft&#39;s OCR endpoint returns a Job Token that can be exchanged for updates, and eventually a result.</span>\n<span class=\"sd\">        - Google&#39;s AutoML can take 20-30 minutes to train.</span>\n<span class=\"sd\">        - Fine-tuning BERT on ECS can take an arbitrarily long amount of time.</span>\n\n<span class=\"sd\">        In these cases, it can be useful for the package/plugin to occasionally post updates to the Engine outside</span>\n<span class=\"sd\">        of the Engine&#39;s initial synchronous request-response conversation.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">task_id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;An App/Plugin response can only be pushed to the Steamship Engine if &quot;</span>\n                <span class=\"o\">+</span> <span class=\"s2\">&quot;it is associated with a Task. Please set the `status.task_id` field.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">client</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Unable to push Response to Steamship: Associated client is None&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Create a task object</span>\n        <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">task_id</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">task_id</span><span class=\"p\">)</span>\n        <span class=\"n\">update_fields</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">state</span>\n            <span class=\"n\">update_fields</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;state&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_message</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">status_message</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_message</span>\n            <span class=\"n\">update_fields</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;status_message&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_suggestion</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">status_suggestion</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">status_suggestion</span>\n            <span class=\"n\">update_fields</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;status_suggestion&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># This object itself should always be the output of the Training Task object.</span>\n            <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"n\">update_fields</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;output&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">post_update</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"n\">update_fields</span><span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/invocable/invocable_response", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}