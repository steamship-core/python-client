{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.invocable.plugin_service", "body": "<h1>Source code for steamship.invocable.plugin_service</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span><span class=\"p\">,</span> <span class=\"n\">abstractmethod</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Generic</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"c1\"># Note!</span>\n<span class=\"c1\"># =====</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># This the files in this package are for Plugin Implementors.</span>\n<span class=\"c1\"># If you are using the Steamship Client, you probably are looking for either steamship.client or steamship.data</span>\n<span class=\"c1\">#</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">Invocable</span><span class=\"p\">,</span> <span class=\"n\">InvocableResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.plugin.inputs.train_plugin_input</span> <span class=\"kn\">import</span> <span class=\"n\">TrainPluginInput</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.plugin.inputs.training_parameter_plugin_input</span> <span class=\"kn\">import</span> <span class=\"n\">TrainingParameterPluginInput</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.plugin.outputs.train_plugin_output</span> <span class=\"kn\">import</span> <span class=\"n\">TrainPluginOutput</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.plugin.outputs.training_parameter_plugin_output</span> <span class=\"kn\">import</span> <span class=\"n\">TrainingParameterPluginOutput</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.plugin.request</span> <span class=\"kn\">import</span> <span class=\"n\">PluginRequest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.plugin.trainable_model</span> <span class=\"kn\">import</span> <span class=\"n\">TrainableModel</span>\n\n<span class=\"n\">IN</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">&quot;IN&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">OUT</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">&quot;OUT&quot;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"PluginService\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.PluginService\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PluginService</span><span class=\"p\">(</span><span class=\"n\">Invocable</span><span class=\"p\">,</span> <span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">IN</span><span class=\"p\">,</span> <span class=\"n\">OUT</span><span class=\"p\">],</span> <span class=\"n\">ABC</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;The Abstract Base Class of a Steamship Plugin.</span>\n\n<span class=\"sd\">    All Steamship Plugins implement the operation:</span>\n\n<span class=\"sd\">    - run(PluginRequest[T]) -&gt; Response[U]</span>\n\n<span class=\"sd\">    Many plugins are effectively stateless. This run operation defines their entire capability.</span>\n<span class=\"sd\">    Examples of such stateless plugins are:</span>\n<span class=\"sd\">    - File Import Plugin</span>\n<span class=\"sd\">    - Export Plugin</span>\n\n<span class=\"sd\">    Other plugins have state but in a very controlled way:</span>\n<span class=\"sd\">    - they can be trained,</span>\n<span class=\"sd\">    - this trainable process produces a &quot;model&quot;,</span>\n<span class=\"sd\">    - that model acts as the state on which the `run` method is conditioned</span>\n\n<span class=\"sd\">    This model is stored in the Steamship Workspace that owns the Plugin Instance, and access to it is provided by the</span>\n<span class=\"sd\">    hosting environment that runs the model.</span>\n<span class=\"sd\">    - TODO(ted) Document this process.</span>\n\n<span class=\"sd\">    These stateful plugins are called &quot;Trainable Plugins,&quot; and they must implement the following additional methods:</span>\n\n<span class=\"sd\">    - get_training_parameters(PluginRequest[TrainingParameterInput]) -&gt; Response[TrainingParameterOutput]</span>\n<span class=\"sd\">    - train(PluginRequest[TrainPluginInput]) -&gt; Response[TrainPluginOutput]</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"PluginService.run\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.PluginService.run\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">IN</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">OUT</span><span class=\"p\">,</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">OUT</span><span class=\"p\">]]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Runs the core operation implemented by this plugin: import, export, blockify, tag, etc.</span>\n\n<span class=\"sd\">        This is the method that a Steamship Plugin implements to perform its main work.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"TrainablePluginService\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">TrainablePluginService</span><span class=\"p\">(</span><span class=\"n\">PluginService</span><span class=\"p\">,</span> <span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">IN</span><span class=\"p\">,</span> <span class=\"n\">OUT</span><span class=\"p\">],</span> <span class=\"n\">ABC</span><span class=\"p\">):</span>\n<div class=\"viewcode-block\" id=\"TrainablePluginService.model_cls\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService.model_cls\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">model_cls</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">TrainableModel</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns the constructor of the TrainableModel this TrainablePluginService uses.</span>\n\n<span class=\"sd\">        This is required so the `run` method below can load the model and provide it to the subclass implementor.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"TrainablePluginService.run\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService.run\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">IN</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">OUT</span><span class=\"p\">,</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">OUT</span><span class=\"p\">]]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Loads the trainable model before passing the request to the `run_with_model` handler on the subclass.&quot;&quot;&quot;</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;TrainablePluginService:run() - Loading model&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model_cls</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">load_remote</span><span class=\"p\">(</span>\n            <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span>  <span class=\"c1\"># This field comes from being a subclass of App</span>\n            <span class=\"n\">plugin_instance_id</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">plugin_instance_id</span><span class=\"p\">,</span>\n            <span class=\"n\">checkpoint_handle</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># Will use default</span>\n            <span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">plugin_instance_config</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;TrainablePluginService:run() - Loaded model; invoking run_with_model&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_with_model</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TrainablePluginService.run_with_model\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService.run_with_model\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">run_with_model</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">IN</span><span class=\"p\">],</span> <span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">TrainableModel</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">OUT</span><span class=\"p\">,</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">OUT</span><span class=\"p\">]]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Rather than implementing run(request), a TrainablePluginService implements run_with_model(request, model)&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"TrainablePluginService.get_training_parameters\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService.get_training_parameters\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_training_parameters</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">TrainingParameterPluginInput</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">TrainingParameterPluginOutput</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Produces the trainable parameters for this plugin.</span>\n\n<span class=\"sd\">        This method is run by the Steamship Engine prior to training to fetch hyperparameters.</span>\n\n<span class=\"sd\">        - The user themselves can provide hyperparameters on the TrainingParameterPluginInput object.</span>\n<span class=\"sd\">        - This method then transforms those into the TrainingParameterPluginOutput object, altering the user&#39;s values</span>\n<span class=\"sd\">          if desired.</span>\n<span class=\"sd\">        - The Engine then takes those TrainingParameterPluginOutput and presents them on the TrainPluginInput</span>\n\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"TrainablePluginService.train\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService.train\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">train</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">TrainPluginInput</span><span class=\"p\">],</span> <span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">TrainableModel</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">TrainPluginOutput</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Train the model.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"TrainablePluginService.train_status\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.plugin_service.TrainablePluginService.train_status\">[docs]</a>    <span class=\"nd\">@abstractmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">train_status</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">PluginRequest</span><span class=\"p\">[</span><span class=\"n\">TrainPluginInput</span><span class=\"p\">],</span> <span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">TrainableModel</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">[</span><span class=\"n\">TrainPluginOutput</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Train the model.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/invocable/plugin_service", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}