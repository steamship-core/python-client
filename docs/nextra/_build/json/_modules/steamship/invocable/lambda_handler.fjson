{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.invocable.lambda_handler", "body": "<h1>Source code for steamship.invocable.lambda_handler</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">traceback</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">http</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPStatus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">environ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Type</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">fluent</span> <span class=\"kn\">import</span> <span class=\"n\">asynchandler</span> <span class=\"k\">as</span> <span class=\"n\">fluenthandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluent.handler</span> <span class=\"kn\">import</span> <span class=\"n\">FluentRecordFormatter</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Configuration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.client</span> <span class=\"kn\">import</span> <span class=\"n\">Steamship</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.workspace</span> <span class=\"kn\">import</span> <span class=\"n\">SignedUrl</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">Invocable</span><span class=\"p\">,</span> <span class=\"n\">InvocableRequest</span><span class=\"p\">,</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">,</span> <span class=\"n\">InvocationContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.utils.signed_urls</span> <span class=\"kn\">import</span> <span class=\"n\">upload_to_signed_url</span>\n\n\n<div class=\"viewcode-block\" id=\"encode_exception\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.encode_exception\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">encode_exception</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;When logging an exception ex: logging.exception(some_error), the exception must be turned into a string</span>\n<span class=\"sd\">    so that it is accepted by elasticsearch&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">SteamshipError</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">to_dict</span><span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;exception_class: </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">, args: </span><span class=\"si\">{</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span></div>\n\n\n<div class=\"viewcode-block\" id=\"internal_handler\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.internal_handler\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">internal_handler</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: C901</span>\n    <span class=\"n\">invocable_cls_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[],</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Invocable</span><span class=\"p\">]],</span>\n    <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span>\n    <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Steamship</span><span class=\"p\">,</span>\n    <span class=\"n\">invocation_context</span><span class=\"p\">:</span> <span class=\"n\">InvocationContext</span><span class=\"p\">,</span>\n    <span class=\"n\">call_instance_init</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">:</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">InvocableRequest</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">SteamshipError</span> <span class=\"k\">as</span> <span class=\"n\">se</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">from_obj</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Plugin/App handler was unable to parse inbound request.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">request</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"p\">:</span>\n        <span class=\"n\">error_prefix</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;[ERROR - </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">http_verb</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">invocation_path</span><span class=\"si\">}</span><span class=\"s2\">] &quot;</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">error_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;[ERROR - ?VERB ?PATH] &quot;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">invocation_path</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;/__dir__&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Return the DIR result without (1) Constructing invocable_cls or (2) Parsing its config (in the constructor)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">invocable_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Invocable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">invocable_cls_func</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">invocable_class</span><span class=\"o\">.</span><span class=\"n\">__steamship_dir__</span><span class=\"p\">(</span><span class=\"n\">invocable_class</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"n\">SteamshipError</span> <span class=\"k\">as</span> <span class=\"n\">se</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">from_obj</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n                <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">error_prefix</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Unable to initialize package/plugin.&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">invocable</span> <span class=\"o\">=</span> <span class=\"n\">invocable_cls_func</span><span class=\"p\">()(</span>\n            <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"n\">invocation_context</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">call_instance_init</span><span class=\"p\">:</span>\n            <span class=\"c1\"># TODO: We don&#39;t want to run this every time, but for now we are.</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Running __instance_init__&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">invocable</span><span class=\"o\">.</span><span class=\"n\">instance_init</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">SteamshipError</span> <span class=\"k\">as</span> <span class=\"n\">se</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">from_obj</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">error_prefix</span><span class=\"p\">,</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Unable to initialize package/plugin.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">invocable</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">error_prefix</span><span class=\"p\">,</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Unable to construct package/plugin for invocation.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">invocable</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">from_obj</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">SteamshipError</span> <span class=\"k\">as</span> <span class=\"n\">se</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n        <span class=\"n\">se</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">error_prefix</span><span class=\"si\">}{</span><span class=\"n\">se</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">from_obj</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"n\">error_prefix</span><span class=\"p\">,</span>\n            <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"handler\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.handler\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: C901</span>\n    <span class=\"n\">bound_internal_handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">running_locally</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">running_locally</span><span class=\"p\">:</span>\n        <span class=\"n\">logging_config</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;loggingConfig&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">logging_config</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Plugin/App handler did not receive a remote logging config.&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logging_host</span> <span class=\"o\">=</span> <span class=\"n\">logging_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;loggingHost&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">logging_port</span> <span class=\"o\">=</span> <span class=\"n\">logging_config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;loggingPort&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n        <span class=\"n\">logging_handler</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"n\">invocation_context_dict</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;invocationContext&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">invocation_context_dict</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Plugin/App handler did not receive an invocation context.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">invocation_context</span> <span class=\"o\">=</span> <span class=\"n\">InvocationContext</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span><span class=\"n\">invocation_context_dict</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># At the point in the code, the root log level seems to default to WARNING unless set to INFO, even with</span>\n    <span class=\"c1\"># the BasicConfig setting to INFO above.</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># These log statements intentionally go to the logging handler pre-remote attachment, to debug logging configuration issues</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">running_locally</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Logging host: </span><span class=\"si\">{</span><span class=\"n\">logging_host</span><span class=\"si\">}</span><span class=\"s2\"> Logging port: </span><span class=\"si\">{</span><span class=\"n\">logging_port</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Invocation context: </span><span class=\"si\">{</span><span class=\"n\">invocation_context</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"ow\">not</span> <span class=\"n\">running_locally</span> <span class=\"ow\">and</span> <span class=\"n\">logging_host</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;none&quot;</span>\n    <span class=\"p\">):</span>  <span class=\"c1\"># Key off the string none, not &#39;is None&#39;, to avoid config errors where remote host isn&#39;t passed</span>\n        <span class=\"c1\"># Configure remote logging</span>\n        <span class=\"k\">if</span> <span class=\"n\">logging_host</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Plugin/App handler did receive a remote logging config, but it did not include a loggingHost.&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">logging_port</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Plugin/App handler did receive a remote logging config, but it did not include a loggingPort.&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"n\">custom_format</span> <span class=\"o\">=</span> <span class=\"n\">create_custom_format</span><span class=\"p\">(</span><span class=\"n\">invocation_context</span><span class=\"o\">=</span><span class=\"n\">invocation_context</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"o\">=</span><span class=\"n\">event</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logging_handler</span> <span class=\"o\">=</span> <span class=\"n\">fluenthandler</span><span class=\"o\">.</span><span class=\"n\">FluentHandler</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;steamship.deployed_lambda&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">logging_host</span><span class=\"p\">,</span>\n            <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"n\">logging_port</span><span class=\"p\">,</span>\n            <span class=\"n\">nanosecond_precision</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">msgpack_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"n\">encode_exception</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Without explicit instruction, the fluent handler defaults to UNSET. We want to make sure it is INFO.</span>\n        <span class=\"n\">logging_handler</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n        <span class=\"n\">formatter</span> <span class=\"o\">=</span> <span class=\"n\">FluentRecordFormatter</span><span class=\"p\">(</span><span class=\"n\">custom_format</span><span class=\"p\">)</span>\n        <span class=\"n\">logging_handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>\n        <span class=\"c1\"># The below should make it so calls to logging.info etc are also routed to the remote logger</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">logging_handler</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Config will accept `workspace_id` as passed from the Steamship Engine, whereas the `Steamship`</span>\n        <span class=\"c1\"># class itself is limited to accepting `workspace` (`config.workspace_handle`) since that is the manner</span>\n        <span class=\"c1\"># of interaction ideal for developers.</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;clientConfig&quot;</span><span class=\"p\">,</span> <span class=\"p\">{}))</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Steamship</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">trust_workspace_config</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">SteamshipError</span> <span class=\"k\">as</span> <span class=\"n\">se</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">from_obj</span><span class=\"p\">(</span><span class=\"n\">se</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Plugin/App handler was unable to create Steamship client.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">running_locally</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Localstack hostname: </span><span class=\"si\">{</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;LOCALSTACK_HOSTNAME&#39;</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">bound_internal_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">invocation_context</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;client&quot;</span><span class=\"p\">})</span>\n    <span class=\"c1\"># When created with data &gt; 4MB, data is uploaded to a bucket.</span>\n    <span class=\"c1\"># This is a very ugly way to get the deep size of this object</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;UTF-8&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">data_size</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">getsizeof</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Response data size </span><span class=\"si\">{</span><span class=\"n\">data_size</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">data_size</span> <span class=\"o\">&gt;</span> <span class=\"mf\">4e6</span> <span class=\"ow\">and</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">invocable_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;plugin&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Response data size &gt;4MB, must upload to bucket&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">filepath</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">())</span>\n        <span class=\"n\">signed_url</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_workspace</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"n\">create_signed_url</span><span class=\"p\">(</span>\n                <span class=\"n\">SignedUrl</span><span class=\"o\">.</span><span class=\"n\">Request</span><span class=\"p\">(</span>\n                    <span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"n\">SignedUrl</span><span class=\"o\">.</span><span class=\"n\">Bucket</span><span class=\"o\">.</span><span class=\"n\">PLUGIN_DATA</span><span class=\"p\">,</span>\n                    <span class=\"n\">filepath</span><span class=\"o\">=</span><span class=\"n\">filepath</span><span class=\"p\">,</span>\n                    <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"n\">SignedUrl</span><span class=\"o\">.</span><span class=\"n\">Operation</span><span class=\"o\">.</span><span class=\"n\">WRITE</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">signed_url</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Got signed url for writing: </span><span class=\"si\">{</span><span class=\"n\">signed_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">upload_to_signed_url</span><span class=\"p\">(</span><span class=\"n\">signed_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Now remove raw data and replace with bucket</span>\n        <span class=\"k\">del</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;dataBucket&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">SignedUrl</span><span class=\"o\">.</span><span class=\"n\">Bucket</span><span class=\"o\">.</span><span class=\"n\">PLUGIN_DATA</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;dataFilepath&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filepath</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">running_locally</span> <span class=\"ow\">and</span> <span class=\"n\">logging_handler</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">logging_handler</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">result</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_custom_format\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.create_custom_format\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_custom_format</span><span class=\"p\">(</span>\n    <span class=\"n\">invocation_context</span><span class=\"p\">:</span> <span class=\"n\">InvocationContext</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">Dict</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">]:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">custom_format</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LogRecord</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;level&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">levelname</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;where&quot;</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"si\">}</span><span class=\"s2\">.</span><span class=\"si\">{</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"si\">}</span><span class=\"s2\">.</span><span class=\"si\">{</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">funcName</span><span class=\"si\">}</span><span class=\"s2\">:</span><span class=\"si\">{</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">levelname</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;stack_trace&quot;</span><span class=\"p\">:</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">exc_text</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;component&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;package-plugin-lambda&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;userId&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">user_id</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;workspaceId&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">workspace_id</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;tenantId&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">tenant_id</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;invocableHandle&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">invocable_handle</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;invocableVersionHandle&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">invocable_version_handle</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;invocableInstanceHandle&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">invocable_instance_handle</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;invocableType&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">invocable_type</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;invocableOwnerId&quot;</span><span class=\"p\">:</span> <span class=\"n\">invocation_context</span><span class=\"o\">.</span><span class=\"n\">invocable_owner_id</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;invocation&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;invocationPath&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\"># if isinstance(record.args, dict):</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"c1\"># Giving the callable a callable attribute is very odd, but required</span>\n    <span class=\"c1\"># for the FluentRecordFormatter to work</span>\n    <span class=\"n\">custom_format</span><span class=\"o\">.</span><span class=\"n\">usesTime</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">custom_format</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_handler\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.create_handler\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_handler</span><span class=\"p\">(</span><span class=\"n\">invocable_cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Invocable</span><span class=\"p\">]):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Deprecated wrapper function for a Steamship invocable within an AWS Lambda function. Called by code within a</span>\n<span class=\"sd\">    plugin or package.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;Creating deprecated (unsafe imports) create_handler. This is no longer necessary. Please remove handler = create_handler(...) from your package or plugin.&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deprecated_handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Calling deprecated (unsafe imports) create_handler. This indicates use of newer SDK against an older platform version.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">deprecated_handler</span></div>\n\n\n<div class=\"viewcode-block\" id=\"safely_find_invocable_class\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.safely_find_invocable_class\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">safely_find_invocable_class</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Invocable</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Safely find the invocable class within invocable code.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s2\">&quot;api&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_class_from_module</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;There was an error loading the main file (it must be named api.py):</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">traceback</span><span class=\"o\">.</span><span class=\"n\">format_exc</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">e</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_class_from_module\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.get_class_from_module\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_class_from_module</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Invocable</span><span class=\"p\">]:</span>\n    <span class=\"n\">invocable_classes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)]:</span>\n        <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isclass</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Using names and not issubclass(element, Invocable) because latter was returning false?</span>\n            <span class=\"n\">superclass_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmro</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;Invocable&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">superclass_names</span> <span class=\"ow\">and</span> <span class=\"n\">element</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;api&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">invocable_classes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invocable_classes</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Could not find package or plugin class in api.py. Define your package or plugin by subclassing from PluginService or PackageService.&quot;</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">invocable_classes</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Found too many invocable classes </span><span class=\"si\">{</span><span class=\"n\">invocable_classes</span><span class=\"si\">}</span><span class=\"s2\"> in api.py. Only one is supported.&quot;</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">invocable_class</span> <span class=\"o\">=</span> <span class=\"n\">invocable_classes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Safely loaded main class: </span><span class=\"si\">{</span><span class=\"n\">invocable_class</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">invocable_class</span></div>\n\n\n<div class=\"viewcode-block\" id=\"create_safe_handler\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.lambda_handler.create_safe_handler\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">create_safe_handler</span><span class=\"p\">(</span><span class=\"n\">known_invocable_for_testing</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Invocable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">known_invocable_for_testing</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">invocable_getter</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">known_invocable_for_testing</span>  <span class=\"c1\"># noqa: E731</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">invocable_getter</span> <span class=\"o\">=</span> <span class=\"n\">safely_find_invocable_class</span>\n    <span class=\"n\">bound_internal_handler</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">internal_handler</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: E731</span>\n        <span class=\"n\">invocable_getter</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">context</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">bound_internal_handler</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span></div>\n\n\n<span class=\"c1\"># safe_handler is the new handler entrypoint, allowing the import section of user-provided code to run in a</span>\n<span class=\"c1\"># context where we can trap errors.</span>\n<span class=\"n\">safe_handler</span> <span class=\"o\">=</span> <span class=\"n\">create_safe_handler</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/steamship/invocable/lambda_handler", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}