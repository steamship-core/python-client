{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.invocable.invocable", "body": "<h1>Source code for steamship.invocable.invocable</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;Please see https://docs.steamship.com/ for information about building a Steamship Package&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">http</span> <span class=\"kn\">import</span> <span class=\"n\">HTTPStatus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">toml</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.package_spec</span> <span class=\"kn\">import</span> <span class=\"n\">MethodSpec</span><span class=\"p\">,</span> <span class=\"n\">PackageSpec</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.client.steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Steamship</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">Config</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable.config</span> <span class=\"kn\">import</span> <span class=\"n\">ConfigParameter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable.invocable_request</span> <span class=\"kn\">import</span> <span class=\"n\">InvocableRequest</span><span class=\"p\">,</span> <span class=\"n\">InvocationContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable.invocable_response</span> <span class=\"kn\">import</span> <span class=\"n\">InvocableResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.utils.url</span> <span class=\"kn\">import</span> <span class=\"n\">Verb</span>\n\n\n<div class=\"viewcode-block\" id=\"make_registering_decorator\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.make_registering_decorator\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_registering_decorator</span><span class=\"p\">(</span><span class=\"n\">decorator</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Returns a copy of foreignDecorator, which is identical in every</span>\n<span class=\"sd\">    way(*), except also appends a .decorator property to the callable it</span>\n<span class=\"sd\">    spits out.</span>\n\n<span class=\"sd\">    (*)We can be somewhat &quot;hygienic&quot;, but newDecorator still isn&#39;t signature-preserving,</span>\n<span class=\"sd\">    i.e. you will not be able to get a runtime list of parameters.</span>\n<span class=\"sd\">    For that, you need hackish libraries...but in this case, the only argument is func, so it&#39;s not a big issue</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">new_decorator</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Call to newDecorator(method)</span>\n        <span class=\"c1\"># Exactly like old decorator, but output keeps track of what decorated it</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">decorator</span><span class=\"p\">(</span>\n            <span class=\"n\">func</span>\n        <span class=\"p\">)</span>  <span class=\"c1\"># apply foreignDecorator, like call to foreignDecorator(method) would have done</span>\n        <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">decorator</span> <span class=\"o\">=</span> <span class=\"n\">new_decorator</span>  <span class=\"c1\"># keep track of decorator</span>\n        <span class=\"c1\"># R.original = func         # might as well keep track of everything!</span>\n        <span class=\"k\">return</span> <span class=\"n\">output</span>\n\n    <span class=\"n\">new_decorator</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n    <span class=\"n\">new_decorator</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"n\">decorator</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n    <span class=\"n\">new_decorator</span><span class=\"o\">.</span><span class=\"n\">__is_endpoint__</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_decorator</span></div>\n\n\n<span class=\"c1\"># https://stackoverflow.com/questions/2366713/can-a-decorator-of-an-instance-method-access-the-class</span>\n<span class=\"c1\"># noinspection PyUnusedLocal</span>\n<div class=\"viewcode-block\" id=\"endpoint\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.endpoint\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">endpoint</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;By using ``kwargs`` we can tag the function with Any parameters.&quot;&quot;&quot;</span>  <span class=\"c1\"># noqa: RST210</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decorator</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is used in conjunction with the __init_subclass__ code!</span>\n        <span class=\"c1\"># Otherwise the __name__ won&#39;t be correct in maybeDecorated.__name__!</span>\n        <span class=\"c1\"># noinspection PyShadowingNames</span>\n        <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">wrap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Build a dictionary of String-&gt;Primitive Types to pass back with endpoint</span>\n        <span class=\"c1\"># This enables the Engine to add support for features like public=True, etc, without the Client changing.</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)):</span>\n                <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n\n        <span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">__path__</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n        <span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">__verb__</span> <span class=\"o\">=</span> <span class=\"n\">verb</span>\n        <span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">__endpoint_config__</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">wrap</span>\n\n    <span class=\"n\">decorator</span> <span class=\"o\">=</span> <span class=\"n\">make_registering_decorator</span><span class=\"p\">(</span><span class=\"n\">decorator</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">decorator</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.get\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"post\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.post\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">endpoint</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"RouteMethod\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.RouteMethod\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RouteMethod</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">attribute</span><span class=\"p\">:</span> <span class=\"n\">Any</span>\n    <span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Verb</span><span class=\"p\">]</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"find_route_methods\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.find_route_methods\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">find_route_methods</span><span class=\"p\">(</span><span class=\"n\">on_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RouteMethod</span><span class=\"p\">]:</span>\n    <span class=\"n\">base_route_methods</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">route_method</span>\n        <span class=\"k\">for</span> <span class=\"n\">base_cls</span> <span class=\"ow\">in</span> <span class=\"n\">on_class</span><span class=\"o\">.</span><span class=\"vm\">__bases__</span>\n        <span class=\"k\">for</span> <span class=\"n\">route_method</span> <span class=\"ow\">in</span> <span class=\"n\">find_route_methods</span><span class=\"p\">(</span><span class=\"n\">base_cls</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">this_class_route_methods</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RouteMethod</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">attribute</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">on_class</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()):</span>\n        <span class=\"n\">decorator</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"s2\">&quot;decorator&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">decorator</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">decorator</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__is_endpoint__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__path__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__verb__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__endpoint_config__&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n                <span class=\"n\">this_class_route_methods</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                    <span class=\"n\">RouteMethod</span><span class=\"p\">(</span><span class=\"n\">attribute</span><span class=\"o\">=</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">verb</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">merge_routes_respecting_override</span><span class=\"p\">(</span><span class=\"n\">base_route_methods</span><span class=\"p\">,</span> <span class=\"n\">this_class_route_methods</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"merge_routes_respecting_override\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.merge_routes_respecting_override\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">merge_routes_respecting_override</span><span class=\"p\">(</span>\n    <span class=\"n\">base_routes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RouteMethod</span><span class=\"p\">],</span> <span class=\"n\">this_class_routes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RouteMethod</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RouteMethod</span><span class=\"p\">]:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Merge routes from base classes into the routes from this class. If this class already has verb/path combo,</span>\n<span class=\"sd\">    ignore the one from the superclass, since it has now been overridden.&quot;&quot;&quot;</span>\n    <span class=\"k\">for</span> <span class=\"n\">route_method</span> <span class=\"ow\">in</span> <span class=\"n\">base_routes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">route_list_contains</span><span class=\"p\">(</span><span class=\"n\">route_method</span><span class=\"p\">,</span> <span class=\"n\">this_class_routes</span><span class=\"p\">):</span>\n            <span class=\"n\">this_class_routes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">route_method</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">this_class_routes</span></div>\n\n\n<div class=\"viewcode-block\" id=\"route_list_contains\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.route_list_contains\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">route_list_contains</span><span class=\"p\">(</span><span class=\"n\">route_method</span><span class=\"p\">:</span> <span class=\"n\">RouteMethod</span><span class=\"p\">,</span> <span class=\"n\">routes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">RouteMethod</span><span class=\"p\">]):</span>\n    <span class=\"k\">for</span> <span class=\"n\">other</span> <span class=\"ow\">in</span> <span class=\"n\">routes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"ow\">and</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">verb</span> <span class=\"o\">==</span> <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Invocable\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.Invocable\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Invocable</span><span class=\"p\">(</span><span class=\"n\">ABC</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;A Steamship microservice.</span>\n\n<span class=\"sd\">    This model.py class:</span>\n\n<span class=\"sd\">      1. Provide a pre-authenticated instance of the Steamship client</span>\n<span class=\"sd\">      2. Provides a Lambda handler that routes to registered functions</span>\n<span class=\"sd\">      3. Provides useful methods connecting functions to the router.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">_package_spec</span><span class=\"p\">:</span> <span class=\"n\">PackageSpec</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Config</span>\n    <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">InvocationContext</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Steamship</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">InvocationContext</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># Create an instance-level clone of the PackageSpec so that any route registrations to not impact other</span>\n        <span class=\"c1\"># instance that may exist.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">secret_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">&quot;.steamship/secrets.toml&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>  <span class=\"c1\"># Support local secret loading</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">local_secrets_file</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getfile</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;.steamship&quot;</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;secrets.toml&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">secret_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">toml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">local_secrets_file</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">OSError</span><span class=\"p\">):</span>  <span class=\"c1\"># Support collab usage</span>\n                <span class=\"n\">secret_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"c1\"># The configuration for the Invocable is the union of:</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># 1) The `secret_kwargs` dict, read in from .steamship/secrets.toml, if it exists, and</span>\n        <span class=\"c1\"># 2) The `config` dict, provided upon instantiation.</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># When invoked from within Steamship, the `config` dict is frozen, at the instance level, upon instance</span>\n        <span class=\"c1\"># creation. All subsequent method invocations reuse that frozen config.</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"o\">**</span><span class=\"n\">secret_kwargs</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">config</span> <span class=\"ow\">or</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\"># Finally, we set the config object to an instance of the class returned by `self.config_cls`</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_cls</span><span class=\"p\">()(</span><span class=\"o\">**</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config_cls</span><span class=\"p\">()()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">client</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init_subclass__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">__init_subclass__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># The subclass takes care to extend what the superclass may have set here by copying it.</span>\n        <span class=\"n\">_package_spec</span> <span class=\"o\">=</span> <span class=\"n\">PackageSpec</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[])</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_package_spec&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">import_parent_methods</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"p\">)</span>\n            <span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">used_mixins</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">used_mixins</span> <span class=\"ow\">or</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># The subclass always overrides whatever the superclass set here, having cloned its data.</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span> <span class=\"o\">=</span> <span class=\"n\">_package_spec</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">route_method</span> <span class=\"ow\">in</span> <span class=\"n\">find_route_methods</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_register_mapping</span><span class=\"p\">(</span>\n                <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">attribute</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n                <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Add the HTTP GET /__dir__ method which returns a serialization of the PackageSpec.</span>\n        <span class=\"c1\"># Wired up to both GET and POST for convenience (POST is Steamship default; GET is browser friendly)</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_register_mapping</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;__steamship_dir__&quot;</span><span class=\"p\">,</span> <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/__dir__&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_register_mapping</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;__steamship_dir__&quot;</span><span class=\"p\">,</span> <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/__dir__&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_register_mapping</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;invocable_instance_init&quot;</span><span class=\"p\">,</span> <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/__instance_init__&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{}</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">end_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Registered package functions in </span><span class=\"si\">{</span><span class=\"n\">end_time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start_time</span><span class=\"si\">}</span><span class=\"s2\"> seconds.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__steamship_dir__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return this Invocable&#39;s PackageSpec for remote inspection -- e.g. documentation or OpenAPI generation.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Invocable.invocable_instance_init\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.Invocable.invocable_instance_init\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">invocable_instance_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance_init</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Invocable.add_api_route\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.Invocable.add_api_route\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_api_route</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method_spec</span><span class=\"p\">:</span> <span class=\"n\">MethodSpec</span><span class=\"p\">,</span> <span class=\"n\">permit_overwrite_of_existing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add an API route to this Invocable instance.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to add API route </span><span class=\"si\">{</span><span class=\"n\">method_spec</span><span class=\"si\">}</span><span class=\"s2\">. Reason: _package_spec on Invocable was None.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">add_method</span><span class=\"p\">(</span>\n            <span class=\"n\">method_spec</span><span class=\"p\">,</span> <span class=\"n\">permit_overwrite_of_existing</span><span class=\"o\">=</span><span class=\"n\">permit_overwrite_of_existing</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Invocable.instance_init\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.Invocable.instance_init\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">instance_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;The instance init method will be called ONCE by the engine when a new instance of a package or plugin has been created. By default, this does nothing.&quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"Invocable.config_cls\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.Invocable.config_cls\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">config_cls</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">Config</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns the configuration object for the Invocable.</span>\n\n<span class=\"sd\">        By default, Steamship packages and plugins will not take any configuration. Steamship packages and plugins may</span>\n<span class=\"sd\">        declare a configuration object which extends from Config, if needed, as follows:</span>\n\n<span class=\"sd\">        class MyPackageOrPlugin:</span>\n<span class=\"sd\">            class MyConfig(Config):</span>\n<span class=\"sd\">                ...</span>\n\n<span class=\"sd\">            @classmethod</span>\n<span class=\"sd\">            def config_cls(cls):</span>\n<span class=\"sd\">                return MyPackageOrPlugin.MyConfig</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>  <span class=\"c1\"># noqa: RST301</span>\n        <span class=\"k\">return</span> <span class=\"n\">Config</span></div>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_register_mapping</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Verb</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">MethodSpec</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Register a mapping that permits a method to be invoked via HTTP.&quot;&quot;&quot;</span>\n        <span class=\"n\">method_spec</span> <span class=\"o\">=</span> <span class=\"n\">MethodSpec</span><span class=\"o\">.</span><span class=\"n\">from_class</span><span class=\"p\">(</span>\n            <span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">verb</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">func_binding</span><span class=\"o\">=</span><span class=\"n\">name</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">add_method</span><span class=\"p\">(</span><span class=\"n\">method_spec</span><span class=\"p\">,</span> <span class=\"n\">permit_overwrite_of_existing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">method_spec</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">InvocableRequest</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">InvocableResponse</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Invokes a method call if it is registered.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;__call__: No invocation on request.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">NOT_FOUND</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;No invocation was found.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">http_verb</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">invocation_path</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;REQUEST [</span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\">] </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">method_spec</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">get_method</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">method_spec</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">NOT_FOUND</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;No handler for </span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> available.&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">bound_function</span> <span class=\"o\">=</span> <span class=\"n\">method_spec</span><span class=\"o\">.</span><span class=\"n\">get_bound_function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bound_function</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;__call__: Method not found or not callable for &#39;</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&#39; in method_mappings[</span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\">].&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">InvocableResponse</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"n\">HTTPStatus</span><span class=\"o\">.</span><span class=\"n\">INTERNAL_SERVER_ERROR</span><span class=\"p\">,</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Handler for </span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> not callable.&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">arguments</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">invocation</span><span class=\"o\">.</span><span class=\"n\">arguments</span>\n        <span class=\"k\">if</span> <span class=\"n\">arguments</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound_function</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">bound_function</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">arguments</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Invocable.get_config_parameters\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.invocable.Invocable.get_config_parameters\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_config_parameters</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ConfigParameter</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">config_cls</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_config_parameters</span><span class=\"p\">()</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/invocable/invocable", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}