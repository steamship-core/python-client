{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.invocable.package_service", "body": "<h1>Source code for steamship.invocable.package_service</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Type</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.package_spec</span> <span class=\"kn\">import</span> <span class=\"n\">MethodSpec</span><span class=\"p\">,</span> <span class=\"n\">PackageSpec</span><span class=\"p\">,</span> <span class=\"n\">RouteConflictError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">Invocable</span>\n\n<span class=\"c1\"># Note!</span>\n<span class=\"c1\"># =====</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># This the files in this package are for Package Implementors.</span>\n<span class=\"c1\"># If you are using the Steamship Client, you probably are looking for either steamship.client or steamship.data</span>\n<span class=\"c1\">#</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable.invocable</span> <span class=\"kn\">import</span> <span class=\"n\">find_route_methods</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.invocable.package_mixin</span> <span class=\"kn\">import</span> <span class=\"n\">PackageMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.utils.url</span> <span class=\"kn\">import</span> <span class=\"n\">Verb</span>\n\n\n<div class=\"viewcode-block\" id=\"PackageService\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.package_service.PackageService\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PackageService</span><span class=\"p\">(</span><span class=\"n\">Invocable</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;The Abstract Base Class of a Steamship Package.</span>\n\n<span class=\"sd\">    Packages may implement whatever methods they like.  To expose these methods as invocable HTTP routes,</span>\n<span class=\"sd\">    annotate the method with @get or @post and the route name.</span>\n\n<span class=\"sd\">    Package *implementations* are effectively stateless, though they will have stateful</span>\n\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">USED_MIXIN_CLASSES</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">PackageMixin</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">mixins</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">PackageMixin</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mixins</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__init_subclass__</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">__init_subclass__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Now must add routes for mixins</span>\n        <span class=\"k\">for</span> <span class=\"n\">used_mixin_class</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">USED_MIXIN_CLASSES</span><span class=\"p\">:</span>\n            <span class=\"n\">mixin_qualified_name</span> <span class=\"o\">=</span> <span class=\"n\">used_mixin_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">used_mixin_class</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n            <span class=\"k\">if</span> <span class=\"n\">mixin_qualified_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">used_mixins</span><span class=\"p\">:</span>\n                <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">scan_mixin</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"p\">,</span> <span class=\"n\">used_mixin_class</span><span class=\"p\">)</span>\n                <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"o\">.</span><span class=\"n\">used_mixins</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mixin_qualified_name</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"PackageService.scan_mixin\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.package_service.PackageService.scan_mixin\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scan_mixin</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">,</span>\n        <span class=\"n\">package_spec</span><span class=\"p\">:</span> <span class=\"n\">PackageSpec</span><span class=\"p\">,</span>\n        <span class=\"n\">mixin_class</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">PackageMixin</span><span class=\"p\">],</span>\n        <span class=\"n\">mixin_instance</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">PackageMixin</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">permit_overwrite_of_existing_methods</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">route_method</span> <span class=\"ow\">in</span> <span class=\"n\">find_route_methods</span><span class=\"p\">(</span><span class=\"n\">mixin_class</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">mixin_instance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">func_binding</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">attribute</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"n\">mixin_instance</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">func_binding</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">attribute</span>\n                <span class=\"p\">)</span>  <span class=\"c1\"># This binding is not truly valid. It must be overwritten during add_mixin</span>\n            <span class=\"n\">method_spec</span> <span class=\"o\">=</span> <span class=\"n\">MethodSpec</span><span class=\"o\">.</span><span class=\"n\">from_class</span><span class=\"p\">(</span>\n                <span class=\"n\">mixin_class</span><span class=\"p\">,</span>\n                <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">attribute</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n                <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">,</span>\n                <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">,</span>\n                <span class=\"n\">func_binding</span><span class=\"o\">=</span><span class=\"n\">func_binding</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">allow_override_for_this_route</span> <span class=\"o\">=</span> <span class=\"n\">permit_overwrite_of_existing_methods</span>\n                <span class=\"n\">comparison_path</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span>\n                    <span class=\"k\">if</span> <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">existing_route</span> <span class=\"o\">=</span> <span class=\"n\">package_spec</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                    <span class=\"n\">comparison_path</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"n\">existing_route</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n                    <span class=\"ow\">and</span> <span class=\"n\">existing_route</span><span class=\"o\">.</span><span class=\"n\">class_name</span> <span class=\"o\">==</span> <span class=\"n\">mixin_class</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n                    <span class=\"ow\">and</span> <span class=\"n\">mixin_instance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">allow_override_for_this_route</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">package_spec</span><span class=\"o\">.</span><span class=\"n\">add_method</span><span class=\"p\">(</span>\n                    <span class=\"n\">method_spec</span><span class=\"p\">,</span>\n                    <span class=\"n\">permit_overwrite_of_existing</span><span class=\"o\">=</span><span class=\"n\">allow_override_for_this_route</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">RouteConflictError</span> <span class=\"k\">as</span> <span class=\"n\">conflict_error</span><span class=\"p\">:</span>\n                <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;When attempting to add mixin </span><span class=\"si\">{</span><span class=\"n\">mixin_class</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">, route </span><span class=\"si\">{</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> conflicted with already added route </span><span class=\"si\">{</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">route_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\"> on class </span><span class=\"si\">{</span><span class=\"n\">conflict_error</span><span class=\"o\">.</span><span class=\"n\">existing_method_spec</span><span class=\"o\">.</span><span class=\"n\">class_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"k\">raise</span> <span class=\"n\">RouteConflictError</span><span class=\"p\">(</span>\n                    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">,</span>\n                    <span class=\"n\">existing_method_spec</span><span class=\"o\">=</span><span class=\"n\">conflict_error</span><span class=\"o\">.</span><span class=\"n\">existing_method_spec</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageService.add_mixin\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.package_service.PackageService.add_mixin\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_mixin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mixin</span><span class=\"p\">:</span> <span class=\"n\">PackageMixin</span><span class=\"p\">,</span> <span class=\"n\">permit_overwrite_of_existing_methods</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"n\">PackageService</span><span class=\"o\">.</span><span class=\"n\">scan_mixin</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_package_spec</span><span class=\"p\">,</span>\n            <span class=\"n\">mixin</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span>\n            <span class=\"n\">mixin</span><span class=\"p\">,</span>\n            <span class=\"n\">permit_overwrite_of_existing_methods</span><span class=\"o\">=</span><span class=\"n\">permit_overwrite_of_existing_methods</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mixins</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mixin</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageService.instance_init\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.package_service.PackageService.instance_init\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">instance_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;The instance init method will be called ONCE by the engine when a new instance of a package or plugin has been created. By default, this calls instance_init on mixins, in order.&quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">mixin</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mixins</span><span class=\"p\">:</span>\n            <span class=\"n\">mixin</span><span class=\"o\">.</span><span class=\"n\">instance_init</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageService.invoke_later\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.invocable/#steamship.invocable.package_service.PackageService.invoke_later\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">invoke_later</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"n\">Verb</span> <span class=\"o\">=</span> <span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span>\n        <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Task</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">arguments</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">delay_ms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Task</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Schedule a method for future invocation.</span>\n\n<span class=\"sd\">        Parameters</span>\n<span class=\"sd\">        ----------</span>\n<span class=\"sd\">        method: str</span>\n<span class=\"sd\">                The method to invoke, as registered with Steamship in the @get or @post decorator.</span>\n<span class=\"sd\">        verb:   Verb</span>\n<span class=\"sd\">                The HTTP Verb to use. Default is POST.</span>\n<span class=\"sd\">        wait_on_tasks: List[Task]</span>\n<span class=\"sd\">                A list of Task objects (or task IDs) that should be waited upon before invocation.</span>\n<span class=\"sd\">        arguments: Dict[str, Any]</span>\n<span class=\"sd\">                The keyword arguments of the invoked method</span>\n<span class=\"sd\">        delay_ms: Optional[int]</span>\n<span class=\"sd\">                A delay, in milliseconds, before the invocation should execute.</span>\n\n<span class=\"sd\">        Returns</span>\n<span class=\"sd\">        -------</span>\n<span class=\"sd\">        Task[Any]</span>\n<span class=\"sd\">                A Task representing the future work</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Unable to call invoke_later because the InvocationContext was None&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">invocable_instance_handle</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Unable to call invoke_later because the invocable_instance_handle on InvocationContext was None&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;instanceHandle&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">invocable_instance_handle</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;payload&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;httpVerb&quot;</span><span class=\"p\">:</span> <span class=\"n\">verb</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;invocationPath&quot;</span><span class=\"p\">:</span> <span class=\"n\">method</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;arguments&quot;</span><span class=\"p\">:</span> <span class=\"n\">arguments</span> <span class=\"ow\">or</span> <span class=\"p\">{},</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;package/instance/invoke&quot;</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Scheduling </span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">method</span><span class=\"si\">}</span><span class=\"s2\"> for future invocation on me (</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">invocable_handle</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span>\n            <span class=\"n\">operation</span><span class=\"p\">,</span>\n            <span class=\"n\">payload</span><span class=\"p\">,</span>\n            <span class=\"n\">expect</span><span class=\"o\">=</span><span class=\"n\">Task</span><span class=\"p\">[</span><span class=\"n\">Task</span><span class=\"p\">],</span>  <span class=\"c1\"># This operation should return a task</span>\n            <span class=\"n\">as_background_task</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>  <span class=\"c1\"># This operation should always be asynchronous</span>\n            <span class=\"n\">wait_on_tasks</span><span class=\"o\">=</span><span class=\"n\">wait_on_tasks</span><span class=\"p\">,</span>  <span class=\"c1\"># This operation might await other tasks first</span>\n            <span class=\"n\">task_delay_ms</span><span class=\"o\">=</span><span class=\"n\">delay_ms</span><span class=\"p\">,</span>  <span class=\"c1\"># This operation might have a required delay</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">resp</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/invocable/package_service", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}