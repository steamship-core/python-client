{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.utils.binary_utils", "body": "<h1>Source code for steamship.utils.binary_utils</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span> <span class=\"k\">as</span> <span class=\"nn\">jsonlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base</span> <span class=\"kn\">import</span> <span class=\"n\">MimeTypes</span><span class=\"p\">,</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.mime_types</span> <span class=\"kn\">import</span> <span class=\"n\">ContentEncodings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.model</span> <span class=\"kn\">import</span> <span class=\"n\">CamelModel</span>\n\n\n<div class=\"viewcode-block\" id=\"guess_mime\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.utils/#steamship.utils.binary_utils.guess_mime\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">guess_mime</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">provided_mime</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">provided_mime</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">provided_mime</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">)):</span>\n        <span class=\"k\">return</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">TXT</span>\n    <span class=\"k\">return</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">BINARY</span></div>\n\n\n<div class=\"viewcode-block\" id=\"to_b64\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.utils/#steamship.utils.binary_utils.to_b64\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">to_b64</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"n\">ret_bytes</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n        <span class=\"n\">ret_bytes</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">ret_bytes</span> <span class=\"o\">=</span> <span class=\"n\">ret_bytes</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">ret_bytes</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64encode</span><span class=\"p\">(</span><span class=\"n\">ret_bytes</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"flexi_create\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.utils/#steamship.utils.binary_utils.flexi_create\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">flexi_create</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: C901</span>\n    <span class=\"n\">base64string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">json</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">_bytes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mime_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">force_base64</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]:</span>  <span class=\"c1\"># TODO (Enias): Review</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    It&#39;s convenient for some constructors to accept a variety of input types:</span>\n<span class=\"sd\">    - data (your choice)</span>\n<span class=\"sd\">    - string</span>\n<span class=\"sd\">    - json</span>\n<span class=\"sd\">    - bytes</span>\n\n<span class=\"sd\">    .. And have them all homogenized.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">base64string</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">base64string</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span> <span class=\"ow\">or</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">BINARY</span><span class=\"p\">,</span> <span class=\"n\">ContentEncodings</span><span class=\"o\">.</span><span class=\"n\">BASE64</span>\n\n        <span class=\"n\">ret_data</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># the body of the result</span>\n        <span class=\"n\">ret_mime</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># for the Content-Type field</span>\n        <span class=\"n\">ret_encoding</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># for the Content-Encoding field</span>\n        <span class=\"n\">is_b64</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ret_data</span><span class=\"p\">,</span> <span class=\"n\">ret_mime</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span> <span class=\"ow\">or</span> <span class=\"n\">guess_mime</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">string</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ret_data</span><span class=\"p\">,</span> <span class=\"n\">ret_mime</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"p\">,</span> <span class=\"n\">mime_type</span> <span class=\"ow\">or</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">TXT</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">json</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ret_mime</span> <span class=\"o\">=</span> <span class=\"n\">mime_type</span> <span class=\"ow\">or</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">JSON</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n                <span class=\"n\">ret_dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n                <span class=\"n\">ret_data</span> <span class=\"o\">=</span> <span class=\"n\">ret_dict</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n                <span class=\"n\">ret_dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span>\n                <span class=\"n\">ret_data</span> <span class=\"o\">=</span> <span class=\"n\">ret_dict</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">ret_data</span> <span class=\"o\">=</span> <span class=\"n\">json</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">_bytes</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">_bytes</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">):</span>\n                <span class=\"n\">_bytes</span> <span class=\"o\">=</span> <span class=\"n\">_bytes</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span>  <span class=\"c1\"># Turn it into regular bytes</span>\n            <span class=\"n\">ret_data</span><span class=\"p\">,</span> <span class=\"n\">ret_mime</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64encode</span><span class=\"p\">(</span><span class=\"n\">_bytes</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">),</span>\n                <span class=\"n\">mime_type</span> <span class=\"ow\">or</span> <span class=\"n\">ret_mime</span> <span class=\"ow\">or</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">BINARY</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">is_b64</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">ret_encoding</span> <span class=\"o\">=</span> <span class=\"n\">ContentEncodings</span><span class=\"o\">.</span><span class=\"n\">BASE64</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">ret_data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">force_base64</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">ret_data</span><span class=\"p\">,</span> <span class=\"n\">ret_mime</span><span class=\"p\">,</span> <span class=\"n\">ret_encoding</span>\n            <span class=\"k\">if</span> <span class=\"n\">is_b64</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">ret_data</span><span class=\"p\">,</span> <span class=\"n\">ret_mime</span><span class=\"p\">,</span> <span class=\"n\">ContentEncodings</span><span class=\"o\">.</span><span class=\"n\">BASE64</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">json</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">ret_mime</span> <span class=\"o\">==</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">JSON</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># If it was JSON, we need to dump the object first!</span>\n                    <span class=\"c1\"># Otherwise it will end up getting turned to the Python&#39;s object representation format</span>\n                    <span class=\"c1\"># which will result in invalid JSON</span>\n                    <span class=\"n\">ret_data</span> <span class=\"o\">=</span> <span class=\"n\">jsonlib</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">ret_data</span><span class=\"p\">)</span>\n\n                <span class=\"k\">return</span> <span class=\"p\">(</span>\n                    <span class=\"n\">to_b64</span><span class=\"p\">(</span><span class=\"n\">ret_data</span><span class=\"p\">),</span>\n                    <span class=\"n\">ret_mime</span> <span class=\"ow\">or</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">BINARY</span><span class=\"p\">,</span>\n                    <span class=\"n\">ContentEncodings</span><span class=\"o\">.</span><span class=\"n\">BASE64</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">ex</span><span class=\"p\">:</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;Exception thrown trying to encode data&quot;</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;There was an exception thrown while trying to encode your package/plugin data.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">ex</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/steamship/utils/binary_utils", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}