{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.base.package_spec", "body": "<h1>Source code for steamship.base.package_spec</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;Objects for recording and reporting upon the introspected interface of a Steamship Package.&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">copy</span> <span class=\"kn\">import</span> <span class=\"n\">deepcopy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">,</span> <span class=\"n\">get_args</span><span class=\"p\">,</span> <span class=\"n\">get_origin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">steamship</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.configuration</span> <span class=\"kn\">import</span> <span class=\"n\">CamelModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.utils.url</span> <span class=\"kn\">import</span> <span class=\"n\">Verb</span>\n\n\n<div class=\"viewcode-block\" id=\"RouteConflictError\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.RouteConflictError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RouteConflictError</span><span class=\"p\">(</span><span class=\"n\">SteamshipError</span><span class=\"p\">):</span>\n    <span class=\"n\">existing_method_spec</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MethodSpec&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">existing_method_spec</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MethodSpec&quot;</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">existing_method_spec</span> <span class=\"o\">=</span> <span class=\"n\">existing_method_spec</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ArgSpec\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.ArgSpec\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ArgSpec</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;An argument passed to a method.&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># The name of the argument.</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"c1\"># The kind of the argument, reported by str(annotation) via the `inspect` library. E.g. &lt;class &#39;int&#39;&gt;</span>\n    <span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"c1\"># Possible values, if the kind is an enum type</span>\n    <span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">parameter</span><span class=\"p\">:</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;self&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Attempt to interpret the `self` object as a method parameter.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">):</span>\n                <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">choice</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">choice</span> <span class=\"ow\">in</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"n\">get_origin</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Union</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">get_args</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">)</span>\n            <span class=\"c1\"># For now, only deal with the case where the Union is an Optional[Enum]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n                <span class=\"n\">optional_arg</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">args</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"o\">!=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)][</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># noqa: E721</span>\n                <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">optional_arg</span><span class=\"p\">,</span> <span class=\"n\">Enum</span><span class=\"p\">):</span>\n                    <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">choice</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">choice</span> <span class=\"ow\">in</span> <span class=\"n\">optional_arg</span><span class=\"p\">]</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">annotation</span><span class=\"p\">),</span> <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"ArgSpec.pprint\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.ArgSpec.pprint\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name_width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a pretty printable representation of this argument.&quot;&quot;&quot;</span>\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">name_width</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">prefix</span><span class=\"si\">}{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> - </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"MethodSpec\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">MethodSpec</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;A method, callable remotely, on an object.&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># The HTTP Path at which the method is callable.</span>\n    <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"c1\"># The HTTP Verb at which the method is callable. Defaults to POST</span>\n    <span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"c1\"># The return type. Reported by str(annotation) via the `inspect` library. E.g. &lt;class &#39;int&#39;&gt;</span>\n    <span class=\"n\">returns</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"c1\"># The docstring of the method.</span>\n    <span class=\"n\">doc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># The named arguments of the method. Positional arguments are not permitted.</span>\n    <span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ArgSpec</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># Additional configuration around this endpoint.</span>\n    <span class=\"c1\"># Note: The actual type of this is Optional[Dict[str, Union[str, bool, int, float]]]</span>\n    <span class=\"c1\">#       But if Pydantic sees that, it attempts to force all values to be str, which is wrong.</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># A bound function to call.</span>\n    <span class=\"c1\"># If String: the name of a method to call upon a runtime-provided Invocable.</span>\n    <span class=\"c1\"># If Callable: a function -- on any object -- to call.</span>\n    <span class=\"n\">func_binding</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># The class name of the bound function is associated with. Used for mixin bookkeeping.</span>\n    <span class=\"n\">class_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"MethodSpec.clean_path\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec.clean_path\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clean_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Ensure that the path always starts with /, and at minimum must be at least /.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;/</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;//&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">path</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a new instance, making sure the path is properly formatted.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;path&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n                <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/&quot;</span>\n\n        <span class=\"c1\"># Make sure we sanitize the path to avoid, eg, double //</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">MethodSpec</span><span class=\"o\">.</span><span class=\"n\">clean_path</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"MethodSpec.from_class\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec.from_class\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_class</span><span class=\"p\">(</span>\n        <span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"n\">Verb</span> <span class=\"o\">=</span> <span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">func_binding</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># Get the function on the class so that we can inspect it</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set the return type</span>\n        <span class=\"n\">returns</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">return_annotation</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Set the docstring</span>\n        <span class=\"n\">doc</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span>\n\n        <span class=\"c1\"># Set the arguments</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;self&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ArgSpec</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">sig</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">MethodSpec</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">verb</span><span class=\"p\">,</span>\n            <span class=\"n\">returns</span><span class=\"o\">=</span><span class=\"n\">returns</span><span class=\"p\">,</span>\n            <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"n\">doc</span><span class=\"p\">,</span>\n            <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span>\n            <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span>\n            <span class=\"n\">func_binding</span><span class=\"o\">=</span><span class=\"n\">func_binding</span><span class=\"p\">,</span>\n            <span class=\"n\">class_name</span><span class=\"o\">=</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"MethodSpec.clone\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec.clone\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;MethodSpec&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">MethodSpec</span><span class=\"p\">(</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">),</span>\n            <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">),</span>\n            <span class=\"n\">returns</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"p\">),</span>\n            <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">),</span>\n            <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">),</span>\n            <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">),</span>\n            <span class=\"n\">func_binding</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">,</span>\n            <span class=\"n\">class_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">class_name</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"MethodSpec.pprint\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec.pprint\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name_width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;  &quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a pretty printable representation of this method.&quot;&quot;&quot;</span>\n\n        <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">name_width</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"n\">width</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> -&gt; </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">returns</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"n\">name_width</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">:</span>\n                <span class=\"n\">arg_doc_string</span> <span class=\"o\">=</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">name_width</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">arg_doc_string</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span></div>\n\n<div class=\"viewcode-block\" id=\"MethodSpec.is_same_route_as\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec.is_same_route_as\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_same_route_as</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"s2\">&quot;MethodSpec&quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Two methods are the same route if they share a path and verb.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verb</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">verb</span></div>\n\n<div class=\"viewcode-block\" id=\"MethodSpec.get_bound_function\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.MethodSpec.get_bound_function\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_bound_function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">service_instance</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Get the bound method described by this spec.</span>\n\n<span class=\"sd\">        The `func_binding`, if a string, resolves to a function on the provided Invocable. Else is just a function.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;MethodSpec attempted to get bound function but func_binding was None. </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"c1\"># It&#39;s a string; we should resolve against the invocable.</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">service_instance</span><span class=\"p\">:</span>\n                <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;MethodSpec attempted to get bound function named </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;But provided service_instance was None. </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">service_instance</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">):</span>\n                <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;MethodSpec attempted to get bound function named </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;But provided service_instance did not have that attribute. </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">service_instance</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">)):</span>\n                <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;MethodSpec attempted to get bound function named </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"si\">}</span><span class=\"s2\">. &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;But that attribute on provided service_instance was not callable. </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">service_instance</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"nb\">callable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;MethodSpec attempted to get bound function. &quot;</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;But the func_binding was of type </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func_binding</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> and could not be handled. </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"PackageSpec\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PackageSpec</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;A package, representing a remotely instantiable service.&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># The name of the package</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n    <span class=\"c1\"># The docstring of the package</span>\n    <span class=\"n\">doc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># The SDK version this package is deployed with</span>\n    <span class=\"n\">sdk_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">steamship</span><span class=\"o\">.</span><span class=\"n\">__version__</span>\n\n    <span class=\"c1\"># Which mixins this package leverages</span>\n    <span class=\"n\">used_mixins</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># Quick O(1) lookup into VERB+NAME</span>\n    <span class=\"n\">method_mappings</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">MethodSpec</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">repr</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># TODO: If we upgrade to Pydantic 2xx, we can use @computed_field to include this in dict()</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">all_methods</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">MethodSpec</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return a list of all methods mapped in this Package.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">verb</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">verb</span><span class=\"p\">]:</span>\n                <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">verb</span><span class=\"p\">][</span><span class=\"n\">name</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Sort by name and verb to ease testing</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n\n<div class=\"viewcode-block\" id=\"PackageSpec.pprint\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec.pprint\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;  &quot;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Returns a pretty printable representation of this package.&quot;&quot;&quot;</span>\n        <span class=\"n\">underline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;=&quot;</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">underline</span><span class=\"si\">}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">:</span>\n            <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"si\">}</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_methods</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">methods</span><span class=\"p\">:</span>\n            <span class=\"n\">name_width</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"n\">methods</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"n\">methods</span><span class=\"p\">:</span>\n                <span class=\"n\">method_doc_string</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">name_width</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">)</span>\n                <span class=\"n\">ret</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"si\">{</span><span class=\"n\">method_doc_string</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageSpec.import_parent_methods\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec.import_parent_methods\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">import_parent_methods</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s2\">&quot;PackageSpec&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">parent</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">for</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">all_methods</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_method</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span> <span class=\"n\">permit_overwrite_of_existing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageSpec.add_method\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec.add_method\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_method</span><span class=\"p\">:</span> <span class=\"n\">MethodSpec</span><span class=\"p\">,</span> <span class=\"n\">permit_overwrite_of_existing</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Add a method to the MethodSpec, overwriting the existing if it exists.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">verb</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">]</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">permit_overwrite_of_existing</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">RouteConflictError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Attempted to double-register route without explicitly permitting double-registry. &quot;</span>\n                <span class=\"s2\">&quot;Please include the kwarg permit_overwrite_of_existing=True to confirm your intent. &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Route: </span><span class=\"si\">{</span><span class=\"n\">new_method</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">existing_method_spec</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">][</span><span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">verb</span><span class=\"p\">][</span><span class=\"n\">new_method</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">new_method</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageSpec.get_method\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec.get_method\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">http_verb</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">http_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">MethodSpec</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Matches the provided HTTP Verb and Path to registered methods.</span>\n\n<span class=\"sd\">        This is intended to be the single place where a provided (VERB, PATH) is mapped to a MethodSpec, such</span>\n<span class=\"sd\">        that if we eventually support path variables (/posts/:id/raw), it can be done within this function.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"n\">Verb</span><span class=\"p\">(</span><span class=\"n\">http_verb</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">())</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">MethodSpec</span><span class=\"o\">.</span><span class=\"n\">clean_path</span><span class=\"p\">(</span><span class=\"n\">http_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"s2\">&quot;PackageSpec.get_method: method_mappings is None.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">verb</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;PackageSpec.match_route: Verb &#39;</span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\">&#39; not found in method_mappings.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">verb</span><span class=\"p\">]:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;PackageSpec.match_route: Path &#39;</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&#39; not found in method_mappings[</span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\">].&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method_mappings</span><span class=\"p\">[</span><span class=\"n\">verb</span><span class=\"p\">][</span><span class=\"n\">path</span><span class=\"p\">]</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageSpec.dict\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec.dict\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return the dict representation of this object.</span>\n\n<span class=\"sd\">        Manually adds the `methods` computed field. Note that if we upgrade to Pydantic 2xx we can automatically</span>\n<span class=\"sd\">        include this via decorators.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">ret</span><span class=\"p\">[</span><span class=\"s2\">&quot;methods&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_methods</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span></div>\n\n<div class=\"viewcode-block\" id=\"PackageSpec.clone\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.package_spec.PackageSpec.clone\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;PackageSpec&quot;</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return a copy-by-value clone of this PackageSpec.&quot;&quot;&quot;</span>\n        <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">PackageSpec</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span> <span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">doc</span><span class=\"p\">),</span> <span class=\"n\">sdk_version</span><span class=\"o\">=</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sdk_version</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">all_methods</span><span class=\"p\">:</span>\n            <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">add_method</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">ret</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/base/package_spec", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}