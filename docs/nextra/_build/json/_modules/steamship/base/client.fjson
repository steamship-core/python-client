{"parents": [{"link": "../../../", "title": "Module code"}], "title": "steamship.base.client", "body": "<h1>Source code for steamship.base.client</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">annotations</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">abc</span> <span class=\"kn\">import</span> <span class=\"n\">ABC</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">inspect</span> <span class=\"kn\">import</span> <span class=\"n\">isclass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">TypeVar</span><span class=\"p\">,</span> <span class=\"n\">Union</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">inflection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">BaseModel</span><span class=\"p\">,</span> <span class=\"n\">PrivateAttr</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.configuration</span> <span class=\"kn\">import</span> <span class=\"n\">Configuration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.error</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.mime_types</span> <span class=\"kn\">import</span> <span class=\"n\">MimeTypes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.model</span> <span class=\"kn\">import</span> <span class=\"n\">CamelModel</span><span class=\"p\">,</span> <span class=\"n\">to_camel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.request</span> <span class=\"kn\">import</span> <span class=\"n\">Request</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">TaskState</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.utils.url</span> <span class=\"kn\">import</span> <span class=\"n\">Verb</span><span class=\"p\">,</span> <span class=\"n\">is_local</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">&quot;T&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># TODO (enias): Do we need this?</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_multipart_name</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]:</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Decode any object into a series of HTTP Multi-part segments that Vapor will consume.</span>\n\n<span class=\"sd\">    https://github.com/vapor/multipart-kit</span>\n<span class=\"sd\">    When sending a JSON object in a MultiPart request, Vapor wishes to see multi part segments as follows:</span>\n\n<span class=\"sd\">    single_key</span>\n<span class=\"sd\">    array_key[idx]</span>\n<span class=\"sd\">    obj_key[prop]</span>\n\n<span class=\"sd\">    So a File with a list of one tag with kind=Foo would be transmitted as setting the part:</span>\n<span class=\"sd\">    [tags][0][kind]</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">subval</span> <span class=\"ow\">in</span> <span class=\"n\">val</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">_multipart_name</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">[</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">]&quot;</span><span class=\"p\">,</span> <span class=\"n\">subval</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">subval</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">):</span>\n            <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">_multipart_name</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">[</span><span class=\"si\">{</span><span class=\"n\">idx</span><span class=\"si\">}</span><span class=\"s2\">]&quot;</span><span class=\"p\">,</span> <span class=\"n\">subval</span><span class=\"p\">))</span>\n    <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">ret</span>\n\n\n<div class=\"viewcode-block\" id=\"Client\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Client</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">,</span> <span class=\"n\">ABC</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Client model.py class.</span>\n\n<span class=\"sd\">    Separated primarily as a hack to prevent circular imports.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Configuration</span>\n    <span class=\"n\">_session</span><span class=\"p\">:</span> <span class=\"n\">Session</span> <span class=\"o\">=</span> <span class=\"n\">PrivateAttr</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">api_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">api_base</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">app_base</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">web_base</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">workspace</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fail_if_workspace_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">config_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Configuration</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">trust_workspace_config</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>  <span class=\"c1\"># For use by lambda_handler; don&#39;t fetch the workspace</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a new client.</span>\n\n<span class=\"sd\">        If `workspace` is provided, it will anchor the client in a workspace by that name, creating it if necessary.</span>\n<span class=\"sd\">        Otherwise the `default` workspace will be used.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">config</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">Configuration</span><span class=\"p\">):</span>\n            <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">Configuration</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n        <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span> <span class=\"ow\">or</span> <span class=\"n\">Configuration</span><span class=\"p\">(</span>\n            <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"n\">api_key</span><span class=\"p\">,</span>\n            <span class=\"n\">api_base</span><span class=\"o\">=</span><span class=\"n\">api_base</span><span class=\"p\">,</span>\n            <span class=\"n\">app_base</span><span class=\"o\">=</span><span class=\"n\">app_base</span><span class=\"p\">,</span>\n            <span class=\"n\">web_base</span><span class=\"o\">=</span><span class=\"n\">web_base</span><span class=\"p\">,</span>\n            <span class=\"n\">workspace_handle</span><span class=\"o\">=</span><span class=\"n\">workspace</span><span class=\"p\">,</span>\n            <span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">profile</span><span class=\"p\">,</span>\n            <span class=\"n\">config_file</span><span class=\"o\">=</span><span class=\"n\">config_file</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"c1\"># The lambda_handler will pass in the workspace via the workspace_id, so we need to plumb this through to make sure</span>\n        <span class=\"c1\"># that the workspace switch performed doesn&#39;t mistake `workspace=None` as a request for the default workspace</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">switch_workspace</span><span class=\"p\">(</span>\n            <span class=\"n\">workspace_handle</span><span class=\"o\">=</span><span class=\"n\">workspace</span> <span class=\"ow\">or</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span><span class=\"p\">,</span>\n            <span class=\"n\">workspace_id</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_id</span><span class=\"p\">,</span>\n            <span class=\"n\">fail_if_workspace_exists</span><span class=\"o\">=</span><span class=\"n\">fail_if_workspace_exists</span><span class=\"p\">,</span>\n            <span class=\"n\">trust_workspace_config</span><span class=\"o\">=</span><span class=\"n\">trust_workspace_config</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Client.switch_workspace\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client.switch_workspace\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">switch_workspace</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: C901</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">workspace_handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">workspace_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fail_if_workspace_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">trust_workspace_config</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"c1\"># For use by lambda_handler; don&#39;t fetch the workspacetrust_workspace_config: bool = False, # For use by lambda_handler; don&#39;t fetch the workspace</span>\n    <span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Switches this client to the requested workspace, possibly creating it. If all arguments are None, the client</span>\n<span class=\"sd\">        actively switches into the default workspace.</span>\n\n<span class=\"sd\">        - API calls are performed manually to not result in circular imports.</span>\n<span class=\"sd\">        - Note that the default workspace is technically not necessary for API usage; it will be assumed by the Engine</span>\n<span class=\"sd\">          in the absense of a Workspace ID or Handle being manually specified in request headers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">workspace</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">workspace_handle</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">workspace_id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Switch to the default workspace since no named or ID&#39;ed workspace was provided</span>\n            <span class=\"n\">workspace_handle</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;default&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">fail_if_workspace_exists</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;[Client] Creating workspace with handle/id: </span><span class=\"si\">{</span><span class=\"n\">workspace_handle</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">workspace_id</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;[Client] Creating/Fetching workspace with handle/id: </span><span class=\"si\">{</span><span class=\"n\">workspace_handle</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">workspace_id</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Zero out the workspace_handle on the config block in case we&#39;re being invoked from</span>\n        <span class=\"c1\"># `init` (otherwise we&#39;ll attempt to create the space IN that non-existant workspace)</span>\n        <span class=\"n\">old_workspace_handle</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">trust_workspace_config</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">workspace_handle</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">workspace_id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Attempted a trusted workspace switch without providing both workspace handle and workspace id.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">return_id</span> <span class=\"o\">=</span> <span class=\"n\">workspace_id</span>\n            <span class=\"n\">return_handle</span> <span class=\"o\">=</span> <span class=\"n\">workspace_handle</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">workspace_handle</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">workspace_id</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">get_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">:</span> <span class=\"n\">workspace_handle</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"n\">workspace_id</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;fetchIfExists&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">workspace</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;workspace/get&quot;</span><span class=\"p\">,</span> <span class=\"n\">get_params</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"n\">workspace_handle</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">get_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">:</span> <span class=\"n\">workspace_handle</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;fetchIfExists&quot;</span><span class=\"p\">:</span> <span class=\"ow\">not</span> <span class=\"n\">fail_if_workspace_exists</span><span class=\"p\">,</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">workspace</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;workspace/create&quot;</span><span class=\"p\">,</span> <span class=\"n\">get_params</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"n\">workspace_id</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">get_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"n\">workspace_id</span><span class=\"p\">}</span>\n                    <span class=\"n\">workspace</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;workspace/get&quot;</span><span class=\"p\">,</span> <span class=\"n\">get_params</span><span class=\"p\">)</span>\n\n            <span class=\"k\">except</span> <span class=\"n\">SteamshipError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span> <span class=\"o\">=</span> <span class=\"n\">old_workspace_handle</span>\n                <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">workspace</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Was unable to switch to new workspace: server returned empty Workspace.&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"n\">return_id</span> <span class=\"o\">=</span> <span class=\"n\">workspace</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;workspace&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">return_handle</span> <span class=\"o\">=</span> <span class=\"n\">workspace</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;workspace&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;handle&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">return_id</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">return_handle</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Was unable to switch to new workspace: server returned empty ID and Handle.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Finally, set the new workspace.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_id</span> <span class=\"o\">=</span> <span class=\"n\">return_id</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span> <span class=\"o\">=</span> <span class=\"n\">return_handle</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;[Client] Switched to workspace </span><span class=\"si\">{</span><span class=\"n\">return_handle</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">return_id</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Client.dict\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client.dict\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Because of the trick we do to hack these in as both static and member methods (with different</span>\n        <span class=\"c1\"># implementations), Pydantic will try to include them by default. So we have to suppress that otherwise</span>\n        <span class=\"c1\"># downstream serialization into JSON will fail.</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;exclude&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;use&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;use_plugin&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;_instance_use&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;_instance_use_plugin&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;config&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;api_key&quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">}</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">],</span> <span class=\"nb\">set</span><span class=\"p\">):</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;use&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;use_plugin&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;_instance_use&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">&quot;_instance_use_plugin&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;config&quot;</span>\n            <span class=\"p\">)</span>  <span class=\"c1\"># the set version cannot exclude subcomponents; we must remove all config</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">],</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;use&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;use_plugin&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;_instance_use&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;_instance_use_plugin&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;exclude&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;config&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;api_key&quot;</span><span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_url</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">is_package_call</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">package_owner</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_package_call</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Regular API call</span>\n            <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">api_base</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Do the invocable version</span>\n            <span class=\"k\">if</span> <span class=\"n\">package_owner</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                    <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">&quot;UserMissing&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cannot invoke a package endpoint without the package owner&#39;s user handle.&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">suggestion</span><span class=\"o\">=</span><span class=\"s2\">&quot;Provide the package_owner option, or initialize your package with a lookup.&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">app_base</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_local</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">):</span>\n                <span class=\"c1\"># We want to prepend the user handle</span>\n                <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;//&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">//</span><span class=\"si\">{</span><span class=\"n\">package_owner</span><span class=\"si\">}</span><span class=\"s2\">.</span><span class=\"si\">{</span><span class=\"s1\">&#39;//&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"c1\"># Clean leading and trailing &quot;/&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">base</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">base</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">operation</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"n\">operation</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">base</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"n\">operation</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_headers</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: C901</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">is_package_call</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">package_owner</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">as_background_task</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">task_delay_ms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Authorization&quot;</span><span class=\"p\">:</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;Bearer </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">api_key</span><span class=\"o\">.</span><span class=\"n\">get_secret_value</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">}</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_id</span><span class=\"p\">:</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Workspace-Id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_id</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span><span class=\"p\">:</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Workspace-Handle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">is_package_call</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">package_owner</span><span class=\"p\">:</span>\n                <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Package-Owner-Handle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">package_owner</span>\n            <span class=\"k\">if</span> <span class=\"n\">package_id</span><span class=\"p\">:</span>\n                <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Package-Id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">package_id</span>\n            <span class=\"k\">if</span> <span class=\"n\">package_instance_id</span><span class=\"p\">:</span>\n                <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Package-Instance-Id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">package_instance_id</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">task_delay_ms</span> <span class=\"ow\">and</span> <span class=\"n\">task_delay_ms</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to wait a negative duration of time (task_delay_ms=</span><span class=\"si\">{</span><span class=\"n\">task_delay_ms</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">wait_on_tasks</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">task_delay_ms</span> <span class=\"ow\">and</span> <span class=\"n\">task_delay_ms</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Will result in the engine persisting the inbound HTTP request as a Task for deferred</span>\n            <span class=\"c1\"># execution. Additionally, the task will be scheduled to first wait on the other tasks</span>\n            <span class=\"c1\"># provided in the list of IDs. Accepts a list of EITHER Task objects OR task_id strings.</span>\n            <span class=\"n\">as_background_task</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">if</span> <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span>\n                <span class=\"n\">task_ids</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">task_or_id</span> <span class=\"ow\">in</span> <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">task_or_id</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                        <span class=\"n\">task_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">task_or_id</span><span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">task_or_id</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">):</span>\n                        <span class=\"n\">task_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">task_or_id</span><span class=\"o\">.</span><span class=\"n\">task_id</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;`wait_on_tasks` should only contain Task or str objects. Got a </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">task_or_id</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span>\n                        <span class=\"p\">)</span>\n                <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Task-Dependency&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">task_ids</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">task_delay_ms</span> <span class=\"ow\">and</span> <span class=\"n\">task_delay_ms</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Note: we&#39;re calling utcnow so that a few lines below we can add +00:00 without worrying about TZ</span>\n                <span class=\"n\">current_date_utc</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span>\n                <span class=\"n\">future_date</span> <span class=\"o\">=</span> <span class=\"n\">current_date_utc</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">milliseconds</span><span class=\"o\">=</span><span class=\"n\">task_delay_ms</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># The engine won&#39;t parse it if it includes microseconds.</span>\n                <span class=\"n\">future_date</span> <span class=\"o\">=</span> <span class=\"n\">future_date</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">microsecond</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Python doesn&#39;t add the +00:00 UTC string, which violates the standard; the Engine will refuse.</span>\n                <span class=\"n\">future_date_str</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">future_date</span><span class=\"o\">.</span><span class=\"n\">isoformat</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">+00:00&quot;</span>\n                <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Task-Run-After&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">future_date_str</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">as_background_task</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Will result in the engine persisting the inbound HTTP request as a Task for deferred</span>\n            <span class=\"c1\"># execution. The client will receive task information back instead of the synchronous API response.</span>\n            <span class=\"c1\"># That task can be polled for eventual completion.</span>\n            <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;X-Task-Background&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;true&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">headers</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_prepare_data</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]):</span>\n        <span class=\"k\">if</span> <span class=\"n\">payload</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">payload</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">payload</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">(</span><span class=\"n\">by_alias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unable to parse payload of type </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">data</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_response_data</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">raw_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">resp</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">raw_response</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">content</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;Content-Type&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n                <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;content-type&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n                <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;content-type&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">ct</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"n\">ct</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># application/json; charset=utf-8</span>\n                <span class=\"k\">if</span> <span class=\"n\">ct</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">TXT</span><span class=\"p\">,</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">MKD</span><span class=\"p\">,</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">HTML</span><span class=\"p\">]:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">text</span>\n                <span class=\"k\">elif</span> <span class=\"n\">ct</span> <span class=\"o\">==</span> <span class=\"n\">MimeTypes</span><span class=\"o\">.</span><span class=\"n\">JSON</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">content</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_prepare_multipart_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Note: requests seems to have a bug passing boolean (and maybe numeric?)</span>\n        <span class=\"c1\"># values in the midst of multipart form data. You need to manually convert</span>\n        <span class=\"c1\"># it to a string; otherwise it will pass as False or True (with the capital),</span>\n        <span class=\"c1\"># which is not standard notation outside of Python.</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;false&quot;</span>\n            <span class=\"k\">elif</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;true&quot;</span>\n\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">_multipart_name</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n                <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;file&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">file</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_client_to_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expect</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"n\">response_data</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response_data</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_client_to_object</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">response_data</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response_data</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"p\">:</span>\n                <span class=\"n\">typing_parameters</span> <span class=\"o\">=</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">get_args</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_client_to_response</span><span class=\"p\">(</span>\n                    <span class=\"n\">typing_parameters</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">typing_parameters</span> <span class=\"k\">else</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">el</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_add_client_to_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">response_data</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">expect</span> <span class=\"ow\">and</span> <span class=\"n\">isclass</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response_data</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">response_data</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n                <span class=\"n\">to_camel</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">),</span>\n                <span class=\"n\">to_camel</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;package&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;invocable&quot;</span><span class=\"p\">),</span>\n                <span class=\"c1\"># Hack since engine uses &quot;App&quot; instead of &quot;Package&quot;</span>\n                <span class=\"s2\">&quot;index&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;pluginInstance&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># Inlined here since `expect` may be a subclass of pluginInstance</span>\n            <span class=\"p\">):</span>\n                <span class=\"c1\"># TODO (enias): Hack since the engine responds with incosistent formats e.g. {&quot;plugin&quot; : {plugin_fields}}</span>\n                <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_client_to_response</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n                <span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;client&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">key_to_type</span> <span class=\"o\">=</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">get_type_hints</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_client_to_response</span><span class=\"p\">(</span><span class=\"n\">key_to_type</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">inflection</span><span class=\"o\">.</span><span class=\"n\">underscore</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)),</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">NameError</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># typing.get_type_hints fails for Workspace</span>\n                    <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"Client.call\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client.call\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">call</span><span class=\"p\">(</span>  <span class=\"c1\"># noqa: C901</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">verb</span><span class=\"p\">:</span> <span class=\"n\">Verb</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">expect</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">raw_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">is_package_call</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">package_owner</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">as_background_task</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout_s</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">task_delay_ms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n        <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n    <span class=\"p\">]:</span>  <span class=\"c1\"># TODO (enias): I would like to list all possible return types using interfaces instead of Any</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Post to the Steamship API.</span>\n\n<span class=\"sd\">        All responses have the format::</span>\n\n<span class=\"sd\">        .. code-block:: json</span>\n\n<span class=\"sd\">           {</span>\n<span class=\"sd\">               &quot;data&quot;: &quot;&lt;actual response&gt;&quot;,</span>\n<span class=\"sd\">               &quot;error&quot;: {&quot;reason&quot;: &quot;&lt;message&gt;&quot;}</span>\n<span class=\"sd\">           } # noqa: RST203</span>\n\n<span class=\"sd\">        For the Python client we return the contents of the `data` field if present, and we raise an exception</span>\n<span class=\"sd\">        if the `error` field is filled in.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># TODO (enias): Review this codebase</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_url</span><span class=\"p\">(</span>\n            <span class=\"n\">is_package_call</span><span class=\"o\">=</span><span class=\"n\">is_package_call</span><span class=\"p\">,</span>\n            <span class=\"n\">package_owner</span><span class=\"o\">=</span><span class=\"n\">package_owner</span><span class=\"p\">,</span>\n            <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"n\">operation</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_headers</span><span class=\"p\">(</span>\n            <span class=\"n\">is_package_call</span><span class=\"o\">=</span><span class=\"n\">is_package_call</span><span class=\"p\">,</span>\n            <span class=\"n\">package_owner</span><span class=\"o\">=</span><span class=\"n\">package_owner</span><span class=\"p\">,</span>\n            <span class=\"n\">package_id</span><span class=\"o\">=</span><span class=\"n\">package_id</span><span class=\"p\">,</span>\n            <span class=\"n\">package_instance_id</span><span class=\"o\">=</span><span class=\"n\">package_instance_id</span><span class=\"p\">,</span>\n            <span class=\"n\">as_background_task</span><span class=\"o\">=</span><span class=\"n\">as_background_task</span><span class=\"p\">,</span>\n            <span class=\"n\">wait_on_tasks</span><span class=\"o\">=</span><span class=\"n\">wait_on_tasks</span><span class=\"p\">,</span>\n            <span class=\"n\">task_delay_ms</span><span class=\"o\">=</span><span class=\"n\">task_delay_ms</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_prepare_data</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;Making </span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"s2\"> in workspace </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_handle</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">workspace_id</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">verb</span> <span class=\"o\">==</span> <span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">file</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_prepare_multipart_data</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">)</span>\n                <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout_s</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout_s</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">verb</span> <span class=\"o\">==</span> <span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">:</span>\n            <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout_s</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Unsupported verb: </span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;From </span><span class=\"si\">{</span><span class=\"n\">verb</span><span class=\"si\">}</span><span class=\"s2\"> to </span><span class=\"si\">{</span><span class=\"n\">url</span><span class=\"si\">}</span><span class=\"s2\"> got HTTP </span><span class=\"si\">{</span><span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">debug</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Got response </span><span class=\"si\">{</span><span class=\"n\">resp</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">response_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_response_data</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"n\">raw_response</span><span class=\"o\">=</span><span class=\"n\">raw_response</span><span class=\"p\">)</span>\n\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Response JSON </span><span class=\"si\">{</span><span class=\"n\">response_data</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response_data</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;status&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span>\n                        <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;client&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;expect&quot;</span><span class=\"p\">:</span> <span class=\"n\">expect</span><span class=\"p\">}</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"s2\">&quot;state&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]:</span>\n                        <span class=\"k\">if</span> <span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;state&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;failed&quot;</span><span class=\"p\">:</span>\n                            <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">SteamshipError</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">])</span>\n                            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Client received error from server: </span><span class=\"si\">{</span><span class=\"n\">error</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">TypeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># There&#39;s an edge case here -- if a Steamship package returns the JSON dictionary</span>\n                    <span class=\"c1\">#</span>\n                    <span class=\"c1\"># { &quot;status&quot;: &quot;status string&quot; }</span>\n                    <span class=\"c1\">#</span>\n                    <span class=\"c1\"># Then the above handler will attempt to parse it and throw... But we don&#39;t actually want to throw</span>\n                    <span class=\"c1\"># since we don&#39;t take a strong opinion on what the response type of a package endpoint ought to be.</span>\n                    <span class=\"c1\"># It *may* choose to conform to the SteamshipResponse&lt;T&gt; type, but it doesn&#39;t have to.</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_package_call</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"n\">e</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">task</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"n\">TaskState</span><span class=\"o\">.</span><span class=\"n\">failed</span><span class=\"p\">:</span>\n                    <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">as_error</span><span class=\"p\">()</span>\n\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;data&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">response_data</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">expect</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">SteamshipError</span><span class=\"p\">):</span>\n                        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">expect</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span><span class=\"o\">**</span><span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;client&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">})</span>\n                    <span class=\"k\">elif</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n                        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">expect</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_add_client_to_response</span><span class=\"p\">(</span><span class=\"n\">expect</span><span class=\"p\">,</span> <span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">])</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;obj of type </span><span class=\"si\">{</span><span class=\"n\">expect</span><span class=\"si\">}</span><span class=\"s2\"> does not have a from_dict method&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">response_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">]</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n                    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">response_data</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">response_data</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">error</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">warning</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Client received error from server: </span><span class=\"si\">{</span><span class=\"n\">error</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">error</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">error</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;API call did not complete successfully.  Server returned: </span><span class=\"si\">{</span><span class=\"n\">response_data</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">elif</span> <span class=\"n\">task</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">task</span>\n        <span class=\"k\">elif</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">expect</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># if we have data AND we expect it to be of a certain type,</span>\n            <span class=\"c1\"># we should probably make sure that expectation is met.</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">expect</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Inconsistent response from server (data does not match expected type: </span><span class=\"si\">{</span><span class=\"n\">expect</span><span class=\"si\">}</span><span class=\"s2\">.)&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">suggestion</span><span class=\"o\">=</span><span class=\"s2\">&quot;Please contact support via hello@steamship.com and report what caused this error.&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">data</span>\n        <span class=\"k\">elif</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">data</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Inconsistent response from server. Please contact support.&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Client.post\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client.post\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">BaseModel</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">expect</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">raw_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">is_package_call</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">package_owner</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">as_background_task</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout_s</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">task_delay_ms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n        <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n    <span class=\"p\">]:</span>  <span class=\"c1\"># TODO (enias): I would like to list all possible return types using interfaces instead of Any</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n            <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">,</span>\n            <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"n\">operation</span><span class=\"p\">,</span>\n            <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">,</span>\n            <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">,</span>\n            <span class=\"n\">expect</span><span class=\"o\">=</span><span class=\"n\">expect</span><span class=\"p\">,</span>\n            <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"n\">debug</span><span class=\"p\">,</span>\n            <span class=\"n\">raw_response</span><span class=\"o\">=</span><span class=\"n\">raw_response</span><span class=\"p\">,</span>\n            <span class=\"n\">is_package_call</span><span class=\"o\">=</span><span class=\"n\">is_package_call</span><span class=\"p\">,</span>\n            <span class=\"n\">package_owner</span><span class=\"o\">=</span><span class=\"n\">package_owner</span><span class=\"p\">,</span>\n            <span class=\"n\">package_id</span><span class=\"o\">=</span><span class=\"n\">package_id</span><span class=\"p\">,</span>\n            <span class=\"n\">package_instance_id</span><span class=\"o\">=</span><span class=\"n\">package_instance_id</span><span class=\"p\">,</span>\n            <span class=\"n\">as_background_task</span><span class=\"o\">=</span><span class=\"n\">as_background_task</span><span class=\"p\">,</span>\n            <span class=\"n\">wait_on_tasks</span><span class=\"o\">=</span><span class=\"n\">wait_on_tasks</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout_s</span><span class=\"o\">=</span><span class=\"n\">timeout_s</span><span class=\"p\">,</span>\n            <span class=\"n\">task_delay_ms</span><span class=\"o\">=</span><span class=\"n\">task_delay_ms</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Client.get\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client.get\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">expect</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">raw_response</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">is_package_call</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">package_owner</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">package_instance_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">as_background_task</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">wait_on_tasks</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Task</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout_s</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">task_delay_ms</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Union</span><span class=\"p\">[</span>\n        <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Task</span>\n    <span class=\"p\">]:</span>  <span class=\"c1\"># TODO (enias): I would like to list all possible return types using interfaces instead of Any</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span>\n            <span class=\"n\">verb</span><span class=\"o\">=</span><span class=\"n\">Verb</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"p\">,</span>\n            <span class=\"n\">operation</span><span class=\"o\">=</span><span class=\"n\">operation</span><span class=\"p\">,</span>\n            <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">,</span>\n            <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">,</span>\n            <span class=\"n\">expect</span><span class=\"o\">=</span><span class=\"n\">expect</span><span class=\"p\">,</span>\n            <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"n\">debug</span><span class=\"p\">,</span>\n            <span class=\"n\">raw_response</span><span class=\"o\">=</span><span class=\"n\">raw_response</span><span class=\"p\">,</span>\n            <span class=\"n\">is_package_call</span><span class=\"o\">=</span><span class=\"n\">is_package_call</span><span class=\"p\">,</span>\n            <span class=\"n\">package_owner</span><span class=\"o\">=</span><span class=\"n\">package_owner</span><span class=\"p\">,</span>\n            <span class=\"n\">package_id</span><span class=\"o\">=</span><span class=\"n\">package_id</span><span class=\"p\">,</span>\n            <span class=\"n\">package_instance_id</span><span class=\"o\">=</span><span class=\"n\">package_instance_id</span><span class=\"p\">,</span>\n            <span class=\"n\">as_background_task</span><span class=\"o\">=</span><span class=\"n\">as_background_task</span><span class=\"p\">,</span>\n            <span class=\"n\">wait_on_tasks</span><span class=\"o\">=</span><span class=\"n\">wait_on_tasks</span><span class=\"p\">,</span>\n            <span class=\"n\">timeout_s</span><span class=\"o\">=</span><span class=\"n\">timeout_s</span><span class=\"p\">,</span>\n            <span class=\"n\">task_delay_ms</span><span class=\"o\">=</span><span class=\"n\">task_delay_ms</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Client.logs\"><a class=\"viewcode-back\" href=\"../../../../api/steamship.base/#steamship.base.client.Client.logs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">logs</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span><span class=\"p\">,</span>\n        <span class=\"n\">invocable_handle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">instance_handle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">invocable_version_handle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">field_values</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Return generated logs for a client.</span>\n\n<span class=\"sd\">        The logs will be workspace-scoped. You will only receive logs</span>\n<span class=\"sd\">        for packages and plugins that you own.</span>\n\n<span class=\"sd\">        :param offset: The index of the first log entry to return. This can be used with `number` to page through logs.</span>\n<span class=\"sd\">        :param number: The number of log entries to return. This can be used with `offset` to page through logs.</span>\n<span class=\"sd\">        :param invocable_handle: Enables optional filtering based on the handle of package or plugin. Example: `my-package`</span>\n<span class=\"sd\">        :param instance_handle: Enables optional filtering based on the handle of package instance or plugin instance. Example: `my-instance`</span>\n<span class=\"sd\">        :param invocable_version_handle: Enables optional filtering based on the version handle of package or plugin. Example: `0.0.2`</span>\n<span class=\"sd\">        :param path: Enables optional filtering based on request path. Example: `/generate`.</span>\n<span class=\"sd\">        :param field_values: Enables optional filtering based on user-provided field values.</span>\n<span class=\"sd\">        :return: Returns a dictionary containing the offset and number of log entries as well as a list of `entries` that match the specificed filters.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;from&quot;</span><span class=\"p\">:</span> <span class=\"n\">offset</span><span class=\"p\">,</span> <span class=\"s2\">&quot;size&quot;</span><span class=\"p\">:</span> <span class=\"n\">number</span><span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"n\">invocable_handle</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">&quot;invocableHandle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">invocable_handle</span>\n        <span class=\"k\">if</span> <span class=\"n\">instance_handle</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">&quot;invocableInstanceHandle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">instance_handle</span>\n        <span class=\"k\">if</span> <span class=\"n\">invocable_version_handle</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">&quot;invocableVersionHandle&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">invocable_version_handle</span>\n        <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">&quot;invocablePath&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n        <span class=\"k\">if</span> <span class=\"n\">field_values</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"s2\">&quot;fieldValues&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">field_values</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;logs/list&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/base/client", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}