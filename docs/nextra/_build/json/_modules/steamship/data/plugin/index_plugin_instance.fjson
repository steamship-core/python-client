{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "steamship.data.plugin.index_plugin_instance", "body": "<h1>Source code for steamship.data.plugin.index_plugin_instance</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">,</span> <span class=\"n\">cast</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship</span> <span class=\"kn\">import</span> <span class=\"n\">Block</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.error</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.model</span> <span class=\"kn\">import</span> <span class=\"n\">CamelModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.embeddings</span> <span class=\"kn\">import</span> <span class=\"n\">EmbeddedItem</span><span class=\"p\">,</span> <span class=\"n\">EmbeddingIndex</span><span class=\"p\">,</span> <span class=\"n\">QueryResult</span><span class=\"p\">,</span> <span class=\"n\">QueryResults</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.plugin.plugin_instance</span> <span class=\"kn\">import</span> <span class=\"n\">PluginInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.tags.tag</span> <span class=\"kn\">import</span> <span class=\"n\">Tag</span>\n\n\n<div class=\"viewcode-block\" id=\"EmbedderInvocation\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbedderInvocation\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EmbedderInvocation</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;The parameters capable of creating/fetching an Embedder (Tagger) Plugin Instance.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">plugin_handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">instance_handle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">fetch_if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SearchResult\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.SearchResult\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SearchResult</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;A single scored search result -- which is always a tag.</span>\n\n<span class=\"sd\">    This class is intended to eventually replace the QueryResult object currently used with the Embedding layer.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tag</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"SearchResult.from_query_result\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.SearchResult.from_query_result\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_query_result</span><span class=\"p\">(</span><span class=\"n\">query_result</span><span class=\"p\">:</span> <span class=\"n\">QueryResult</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Client</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;SearchResult&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">hit</span> <span class=\"o\">=</span> <span class=\"n\">query_result</span><span class=\"o\">.</span><span class=\"n\">value</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">metadata</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n\n        <span class=\"c1\"># To make this change Python-only, some fields are stached in `hit.metadata`.</span>\n        <span class=\"c1\"># This has the temporary consequence of these keys not being safe. This will be resolved when we spread</span>\n        <span class=\"c1\"># this refactor to the engine.</span>\n        <span class=\"n\">block_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;_block_id&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">block_id</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;_block_id&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">del</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"s2\">&quot;_block_id&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">file_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;_file_id&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">file_id</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;_file_id&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">del</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"s2\">&quot;_file_id&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">tag_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;_tag_id&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">tag_id</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;_tag_id&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">del</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"s2\">&quot;_tag_id&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">Tag</span><span class=\"p\">(</span>\n            <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">,</span>\n            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n            <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">external_type</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">external_id</span><span class=\"p\">,</span>\n            <span class=\"n\">block_id</span><span class=\"o\">=</span><span class=\"n\">block_id</span><span class=\"p\">,</span>\n            <span class=\"n\">tag_id</span><span class=\"o\">=</span><span class=\"n\">tag_id</span><span class=\"p\">,</span>\n            <span class=\"n\">file_id</span><span class=\"o\">=</span><span class=\"n\">file_id</span><span class=\"p\">,</span>\n            <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">hit</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n            <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">SearchResult</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">=</span><span class=\"n\">tag</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"o\">=</span><span class=\"n\">query_result</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"SearchResults\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.SearchResults\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SearchResults</span><span class=\"p\">(</span><span class=\"n\">CamelModel</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Results of a search operation -- which is always a list of ranked tag.</span>\n\n<span class=\"sd\">    This class is intended to eventually replace the QueryResults object currently used with the Embedding layer.</span>\n<span class=\"sd\">    TODO: add in paging support.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">SearchResult</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"SearchResults.from_query_results\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.SearchResults.from_query_results\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">from_query_results</span><span class=\"p\">(</span><span class=\"n\">query_results</span><span class=\"p\">:</span> <span class=\"n\">QueryResults</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Client</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;SearchResults&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">SearchResult</span><span class=\"o\">.</span><span class=\"n\">from_query_result</span><span class=\"p\">(</span><span class=\"n\">qr</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">qr</span> <span class=\"ow\">in</span> <span class=\"n\">query_results</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"ow\">or</span> <span class=\"p\">[]</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">SearchResults</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"o\">=</span><span class=\"n\">items</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SearchResults.to_ranked_blocks\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.SearchResults.to_ranked_blocks\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">to_ranked_blocks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">]:</span>\n        <span class=\"n\">blocks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"n\">tag</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">tag</span>\n            <span class=\"n\">blocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">block_id</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">blocks</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"EmbeddingIndexPluginInstance\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbeddingIndexPluginInstance\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EmbeddingIndexPluginInstance</span><span class=\"p\">(</span><span class=\"n\">PluginInstance</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;A persistent, read-optimized index over embeddings.</span>\n\n<span class=\"sd\">    This is currently implemented as an object which behaves like a PluginInstance even though</span>\n<span class=\"sd\">    it isn&#39;t from an implementation perspective on the back-end.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">embedder</span><span class=\"p\">:</span> <span class=\"n\">PluginInstance</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">EmbeddingIndex</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"EmbeddingIndexPluginInstance.reset\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbeddingIndexPluginInstance.reset\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">EmbeddingIndex</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span>\n            <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n            <span class=\"n\">embedder_plugin_instance_handle</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">embedder</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n            <span class=\"n\">fetch_if_exists</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EmbeddingIndexPluginInstance.delete\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbeddingIndexPluginInstance.delete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Delete the EmbeddingIndexPluginInstnace.</span>\n\n<span class=\"sd\">        For now, we will have this correspond to deleting the `index` but not the `embedder`. This is likely</span>\n<span class=\"sd\">        a temporary design.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"EmbeddingIndexPluginInstance.insert\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbeddingIndexPluginInstance.insert\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tag</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Tag</span><span class=\"p\">]],</span> <span class=\"n\">allow_long_records</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Insert tags into the embedding index.&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Make a list if a single tag was provided</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">Tag</span><span class=\"p\">):</span>\n            <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">tags</span><span class=\"p\">]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                    <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Please set the `text` field of your Tag before inserting it into an index.&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Now we need to prepare an EmbeddingIndexItem of a particular shape that encodes the tag.</span>\n            <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">metadata</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Only Tags with a dict or None value can be embedded. &quot;</span>\n                    <span class=\"o\">+</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;This tag had a value of type: </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"c1\"># To make this change Python-only, some fields are stashed in `hit.metadata`.</span>\n            <span class=\"c1\"># This has the temporary consequence of these keys not being safe. This will be resolved when we spread</span>\n            <span class=\"c1\"># this refactor to the engine.</span>\n            <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s2\">&quot;_file_id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">file_id</span>\n            <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s2\">&quot;_tag_id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">id</span>\n            <span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s2\">&quot;_block_id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">block_id</span>\n            <span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">metadata</span>\n\n        <span class=\"n\">embedded_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">EmbeddedItem</span><span class=\"p\">(</span>\n                <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span>\n                <span class=\"n\">external_id</span><span class=\"o\">=</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">external_type</span><span class=\"o\">=</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">kind</span><span class=\"p\">,</span>\n                <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"n\">tag</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">tag</span> <span class=\"ow\">in</span> <span class=\"n\">tags</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"c1\"># We always reindex in this new style; to not do so is to expose details (when embedding occurs) we&#39;d rather</span>\n        <span class=\"c1\"># not have users exercise control over.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">insert_many</span><span class=\"p\">(</span><span class=\"n\">embedded_items</span><span class=\"p\">,</span> <span class=\"n\">reindex</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">allow_long_records</span><span class=\"o\">=</span><span class=\"n\">allow_long_records</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EmbeddingIndexPluginInstance.search\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbeddingIndexPluginInstance.search\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">search</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Task</span><span class=\"p\">[</span><span class=\"n\">SearchResults</span><span class=\"p\">]:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Search the embedding index.</span>\n\n<span class=\"sd\">        This wrapper implementation simply projects the `Hit` data structure into a `Tag`</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">query</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Query field must be non-empty.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Metadata will always be included; this is the equivalent of Tag.value</span>\n        <span class=\"n\">wrapped_result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">=</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">include_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># For now, we&#39;ll have to do this synchronously since we&#39;re trying to avoid changing things on the engine.</span>\n        <span class=\"n\">wrapped_result</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># We&#39;re going to do a switcheroo on the output type of Task here.</span>\n        <span class=\"n\">search_results</span> <span class=\"o\">=</span> <span class=\"n\">SearchResults</span><span class=\"o\">.</span><span class=\"n\">from_query_results</span><span class=\"p\">(</span><span class=\"n\">wrapped_result</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">)</span>\n        <span class=\"n\">wrapped_result</span><span class=\"o\">.</span><span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">search_results</span>\n\n        <span class=\"c1\"># Return the index&#39;s search result, but projected into the data structure of Tags</span>\n        <span class=\"k\">return</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">[</span><span class=\"n\">SearchResults</span><span class=\"p\">],</span> <span class=\"n\">wrapped_result</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"EmbeddingIndexPluginInstance.create\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.index_plugin_instance.EmbeddingIndexPluginInstance.create\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_version_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_version_handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fetch_if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;EmbeddingIndexPluginInstance&quot;</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a class that simulates an embedding index re-implemented as a PluginInstance.&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Perform a manual config validation check since the configuration isn&#39;t actually being sent up to the Engine.</span>\n        <span class=\"c1\"># In this case, an embedding index has special behavior which is to instantiate/fetch an Embedder that it can use.</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;embedder&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Config key missing. Please include a field named `embedder` with type `EmbedderInvocation`.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Just for pydantic validation.</span>\n        <span class=\"n\">embedder_invocation</span> <span class=\"o\">=</span> <span class=\"n\">EmbedderInvocation</span><span class=\"o\">.</span><span class=\"n\">parse_obj</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">&quot;embedder&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Create the embedder</span>\n        <span class=\"n\">embedder</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">use_plugin</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">embedder_invocation</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">())</span>\n        <span class=\"n\">embedder</span><span class=\"o\">.</span><span class=\"n\">wait_for_init</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Create the index</span>\n        <span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">EmbeddingIndex</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n            <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">,</span>\n            <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n            <span class=\"n\">embedder_plugin_instance_handle</span><span class=\"o\">=</span><span class=\"n\">embedder</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n            <span class=\"n\">fetch_if_exists</span><span class=\"o\">=</span><span class=\"n\">fetch_if_exists</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Now return the plugin wrapper</span>\n        <span class=\"k\">return</span> <span class=\"n\">EmbeddingIndexPluginInstance</span><span class=\"p\">(</span>\n            <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">embedder</span><span class=\"o\">=</span><span class=\"n\">embedder</span>\n        <span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/steamship/data/plugin/index_plugin_instance", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}