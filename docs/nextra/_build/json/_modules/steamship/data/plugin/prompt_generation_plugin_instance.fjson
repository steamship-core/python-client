{"parents": [{"link": "../../../../", "title": "Module code"}], "title": "steamship.data.plugin.prompt_generation_plugin_instance", "body": "<h1>Source code for steamship.data.plugin.prompt_generation_plugin_instance</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.base.error</span> <span class=\"kn\">import</span> <span class=\"n\">SteamshipError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.plugin.plugin_instance</span> <span class=\"kn\">import</span> <span class=\"n\">CreatePluginInstanceRequest</span><span class=\"p\">,</span> <span class=\"n\">PluginInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">steamship.data.tags.tag_constants</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span><span class=\"p\">,</span> <span class=\"n\">TagValueKey</span>\n\n\n<div class=\"viewcode-block\" id=\"PromptGenerationPluginInstance\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.prompt_generation_plugin_instance.PromptGenerationPluginInstance\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PromptGenerationPluginInstance</span><span class=\"p\">(</span><span class=\"n\">PluginInstance</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;An instance of a configured prompt completion service such as GPT-3.</span>\n\n<span class=\"sd\">    The `generate` method synchronously invokes the prompt against a set of variables that parameterize it.</span>\n<span class=\"sd\">    The return value is a single string.</span>\n\n<span class=\"sd\">    Example Usage:</span>\n<span class=\"sd\">       llm = Steamship.use(&#39;prompt-generation-default&#39;, config={ &quot;temperature&quot;: 0.9 })</span>\n<span class=\"sd\">       PROMPT = &quot;Greet {name} as if he were a {relation}.&quot;</span>\n<span class=\"sd\">       greeting = llm.generate(PROMPT, {&quot;name&quot;: &quot;Ted&quot;, &quot;relation&quot;: &quot;old friend&quot;})</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n<div class=\"viewcode-block\" id=\"PromptGenerationPluginInstance.generate\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.prompt_generation_plugin_instance.PromptGenerationPluginInstance.generate\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">generate</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">clean_output</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Complete the provided prompt, interpolating any variables.&quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Interpolate the prompt with Python formatting semantics. If no variables provided, supply an empty dict.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">prompt_text</span> <span class=\"o\">=</span> <span class=\"n\">prompt</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"n\">variables</span> <span class=\"ow\">or</span> <span class=\"p\">{}))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SteamshipError</span><span class=\"p\">(</span>\n                <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">&quot;Some variables in the prompt template were not provided.&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"n\">e</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># This requests generation from the parameterized prompt. Tagging with our prompt generator</span>\n        <span class=\"c1\"># plugin will result in a new tag that contains the generated output.</span>\n        <span class=\"n\">tag_task</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"n\">doc</span><span class=\"o\">=</span><span class=\"n\">prompt_text</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># We `wait()` because generation of text is done asynchronously and may take a few moments</span>\n        <span class=\"c1\"># (somewhat depending on the complexity of your prompt).</span>\n        <span class=\"n\">tag_task</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Here, we iterate through the content blocks associated with a file</span>\n        <span class=\"c1\"># as well as any tags on that content to find the generated text.</span>\n        <span class=\"c1\">#</span>\n        <span class=\"c1\"># The Steamship data model provides flexible content organization,</span>\n        <span class=\"c1\"># storage, and lookup. Read more about the data model via:</span>\n        <span class=\"c1\"># https://docs.steamship.com/workspaces/data_model/index.html</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">text_block</span> <span class=\"ow\">in</span> <span class=\"n\">tag_task</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">blocks</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">block_tag</span> <span class=\"ow\">in</span> <span class=\"n\">text_block</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">block_tag</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">==</span> <span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">GENERATION</span><span class=\"p\">:</span>\n                        <span class=\"n\">generation</span> <span class=\"o\">=</span> <span class=\"n\">block_tag</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">TagValueKey</span><span class=\"o\">.</span><span class=\"n\">STRING_VALUE</span><span class=\"p\">]</span>\n                        <span class=\"k\">if</span> <span class=\"n\">clean_output</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clean_output</span><span class=\"p\">(</span><span class=\"n\">generation</span><span class=\"p\">)</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"n\">generation</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;generate() got unexpected response shape back. This suggests an error rather an merely an empty response.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">e</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span></div>\n\n<div class=\"viewcode-block\" id=\"PromptGenerationPluginInstance.create\"><a class=\"viewcode-back\" href=\"../../../../../api/steamship.data.plugin/#steamship.data.plugin.prompt_generation_plugin_instance.PromptGenerationPluginInstance.create\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">client</span><span class=\"p\">:</span> <span class=\"n\">Client</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_version_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">plugin_version_handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">handle</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fetch_if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"s2\">&quot;PromptGenerationPluginInstance&quot;</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Create a plugin instance</span>\n\n<span class=\"sd\">        When handle is empty the engine will automatically assign one</span>\n<span class=\"sd\">        fetch_if_exists controls whether we want to re-use an existing plugin instance or not.&quot;&quot;&quot;</span>\n        <span class=\"n\">req</span> <span class=\"o\">=</span> <span class=\"n\">CreatePluginInstanceRequest</span><span class=\"p\">(</span>\n            <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n            <span class=\"n\">plugin_id</span><span class=\"o\">=</span><span class=\"n\">plugin_id</span><span class=\"p\">,</span>\n            <span class=\"n\">plugin_handle</span><span class=\"o\">=</span><span class=\"n\">plugin_handle</span><span class=\"p\">,</span>\n            <span class=\"n\">plugin_version_id</span><span class=\"o\">=</span><span class=\"n\">plugin_version_id</span><span class=\"p\">,</span>\n            <span class=\"n\">plugin_version_handle</span><span class=\"o\">=</span><span class=\"n\">plugin_version_handle</span><span class=\"p\">,</span>\n            <span class=\"n\">fetch_if_exists</span><span class=\"o\">=</span><span class=\"n\">fetch_if_exists</span><span class=\"p\">,</span>\n            <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;plugin/instance/create&quot;</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">expect</span><span class=\"o\">=</span><span class=\"n\">PromptGenerationPluginInstance</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_clean_output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n<span class=\"w\">        </span><span class=\"sd\">&quot;&quot;&quot;Remove any leading/trailing whitespace and partial sentences.</span>\n\n<span class=\"sd\">        This assumes that your generated output will include consistent punctuation. You may</span>\n<span class=\"sd\">        want to alter this method to better fit the format of your generated text.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">last_punc</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"s1\">&#39;.!?&quot;&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">last_punc</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">i</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">last_punc</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[:</span> <span class=\"n\">last_punc</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">text</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span></div>\n</pre></div>", "current_page_name": "_modules/steamship/data/plugin/prompt_generation_plugin_instance", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": true, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}