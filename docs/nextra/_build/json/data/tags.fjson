{"parents": [{"link": "../", "title": "Data Model"}], "prev": {"link": "../blocks/", "title": "Blocks"}, "next": {"link": "../queries/", "title": "Queries"}, "title": "Tags", "meta": {}, "body": "<section id=\"tags\">\n<span id=\"id1\"></span><h1>Tags<a class=\"headerlink\" href=\"#tags\" title=\"Permalink to this heading\">#</a></h1>\n<p>Steamship uses Tags to represent all commentary about content.</p>\n<ul class=\"simple\">\n<li><p>The intent of a chat message</p></li>\n<li><p>The embedding of a sentence</p></li>\n<li><p>The sentiment of a phase</p></li>\n<li><p>The markdown semantics of a region of text</p></li>\n<li><p>Identified object regions of an image</p></li>\n</ul>\n<p>Steamship Files and Blocks contain content. Tags hold all data <strong>about</strong> the content.</p>\n<p>The full <a class=\"reference internal\" href=\"../../api/steamship.data.tags/#steamship.data.tags.tag.Tag\" title=\"steamship.data.tags.tag.Tag\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tag</span> <span class=\"pre\">PyDoc</span> <span class=\"pre\">spec</span> <span class=\"pre\">is</span> <span class=\"pre\">here</span></code></a>, but it\u2019s useful to look at a summarized version:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Tag</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"sd\">&quot;&quot;&quot;Subset of the Tag object -- within the context of a Block&quot;&quot;&quot;</span>\n\n  <span class=\"c1\"># What the tag is</span>\n  <span class=\"n\">kind</span><span class=\"p\">:</span>  <span class=\"nb\">str</span>\n  <span class=\"n\">name</span><span class=\"p\">:</span>  <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n  <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span>\n\n  <span class=\"c1\"># The span of text the tag is commenting upon.</span>\n  <span class=\"c1\"># Indices are relative to the block&#39;s text.</span>\n  <span class=\"n\">start_idx</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"c1\"># Start inclusive</span>\n  <span class=\"n\">end_idx</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>   <span class=\"c1\"># End exclusive</span>\n</pre></div>\n</div>\n<p>This design results in a flexible data storage scheme that can be adapted to a number of\ndifferent scenarios. We optimize our data storage so that you can query over tags and their contents.</p>\n<section id=\"ways-to-use-tags\">\n<h2>Ways to use Tags<a class=\"headerlink\" href=\"#ways-to-use-tags\" title=\"Permalink to this heading\">#</a></h2>\n<p>Here are a few examples to help you think of how tags are used.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">start_idx</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end_idx</span></code> have been left out of the pseudo-code below.</p>\n<ul>\n<li><p>An entity</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;entity&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;person&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;canonical&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Donald Duck&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>A part of speech</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;part-of-speech&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;adj&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>An embedding</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;embedding&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;my-embedder&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&quot;vector-value&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"o\">..</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>A summarization</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;generation&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;summary&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&quot;string-value&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;... summary of the span covered by this tag ...&quot;</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>A dictionary lookup</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;token&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;ce-dict&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&quot;chinese&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;\u4f60\u597d&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pinyin&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;n\u01d0h\u01ceo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;english&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;hello&quot;</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</section>\n<section id=\"tag-schemas\">\n<h2>Tag Schemas<a class=\"headerlink\" href=\"#tag-schemas\" title=\"Permalink to this heading\">#</a></h2>\n<p>Steamship brings together many models under one roof using tags as the common representation for interoperation.\nBut doesn\u2019t fully solve the model interop problem: how do we make sure all models use the same tags?</p>\n<p>Where possible, we use a common schema for the <code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> properties of a tag.\nIf all sentiment models produce tags with kind <code class=\"docutils literal notranslate\"><span class=\"pre\">sentiment</span></code> and a range of names <code class=\"docutils literal notranslate\"><span class=\"pre\">[positive,</span> <span class=\"pre\">neutral,</span> <span class=\"pre\">negative]</span></code>, for example, then we can swap them in and out as needed.</p>\n<p>Our ongoing pursuit of this can be found in the <a class=\"reference external\" href=\"https://github.com/steamship-core/python-client/blob/main/src/steamship/data/tags/tag_constants.py\">tag_constants.py file</a>\nin Github.\nThere you will find Python Enum classes that have common tags across our plugins.</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../../api/steamship.data.tags/#steamship.data.tags.tag_constants.TagKind\" title=\"steamship.data.tags.tag_constants.TagKind\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TagKind</span> <span class=\"pre\">class</span></code></a> contains suggested values for the <code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span></code> field of a Tag.</p></li>\n<li><p><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TagValue</span> <span class=\"pre\">class</span></code> contains suggested keys for the <code class=\"docutils literal notranslate\"><span class=\"pre\">valu</span></code> dictionary of a Tag.</p></li>\n<li><p>The following classes contain suggested values for the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> field:</p>\n<ul>\n<li><p><a class=\"reference internal\" href=\"../../api/steamship.data.tags/#steamship.data.tags.tag_constants.DocTag\" title=\"steamship.data.tags.tag_constants.DocTag\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DocTag</span></code></a> for document semantics (HTML, Markdown, OCR, etc)</p></li>\n<li><p><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmotionTag</span></code> for emotion tagging tag</p></li>\n<li><p><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EntityTag</span></code> for entity tagging tags</p></li>\n<li><p><a class=\"reference internal\" href=\"../../api/steamship.data.tags/#steamship.data.tags.tag_constants.GenerationTag\" title=\"steamship.data.tags.tag_constants.GenerationTag\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenerationTag</span></code></a> for models which generate new data from the covered span as input</p></li>\n<li><p><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntentTag</span></code> for intent classification</p></li>\n<li><p><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SentimentTag</span></code> for sentiment classification</p></li>\n<li><p><a class=\"reference internal\" href=\"../../api/steamship.data.tags/#steamship.data.tags.tag_constants.RoleTag\" title=\"steamship.data.tags.tag_constants.RoleTag\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RoleTag</span></code></a> for role classification</p></li>\n</ul>\n</li>\n</ul>\n<p>These constants are not required, but using them increases the chance that what you build will\ninteroperate cleanly with everyone else that uses them.</p>\n<p>Here is what some of the above tag examples would look like using these enum classes.\nNotice how it is a combination of standard constant and \u201cmagic string\u201d depending on whether a constant exists for that concept.</p>\n<ul>\n<li><p>An entity</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship.data</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span><span class=\"p\">,</span> <span class=\"n\">EntityTag</span>\n<span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">ENTITY</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">EntityTag</span><span class=\"o\">.</span><span class=\"n\">PERSON</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;canonical&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Donald Duck&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>A part of speech</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship.data</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span>\n<span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">PART_OF_SPEECH</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;adj&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>An embedding</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship.data</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span><span class=\"p\">,</span> <span class=\"n\">TagValue</span>\n<span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">EMBEDDING</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;my-embedder&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"n\">TagValue</span><span class=\"o\">.</span><span class=\"n\">VECTOR_VALUE</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"o\">..</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>A summarization</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship.data</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span><span class=\"p\">,</span> <span class=\"n\">GenerationTag</span><span class=\"p\">,</span> <span class=\"n\">TagValue</span>\n<span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">GENERATION</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">GenerationTag</span><span class=\"o\">.</span><span class=\"n\">SUMMARY</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"n\">TagValue</span><span class=\"o\">.</span><span class=\"n\">STRING_VALUE</span><span class=\"p\">:</span> <span class=\"s2\">&quot;... summary of the span covered by this tag ...&quot;</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p>A dictionary lookup</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">steamship.data</span> <span class=\"kn\">import</span> <span class=\"n\">TagKind</span>\n<span class=\"n\">Tag</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"n\">TagKind</span><span class=\"o\">.</span><span class=\"n\">TOKEN</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;ce-dict&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&quot;chinese&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;\u4f60\u597d&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pinyin&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;n\u01d0h\u01ceo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;english&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;hello&quot;</span>\n<span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</section>\n<section id=\"block-and-file-tags\">\n<h2>Block and File Tags<a class=\"headerlink\" href=\"#block-and-file-tags\" title=\"Permalink to this heading\">#</a></h2>\n<p>The above text discusses tags upon spans of text.\nBut Steamship actually supports two types of tags: <strong>File Tags</strong> and <strong>Block Tags</strong>.</p>\n<p><strong>File Tags</strong> annotate a <a class=\"reference internal\" href=\"../files/#files\"><span class=\"std std-ref\">File</span></a> object itself:</p>\n<ul class=\"simple\">\n<li><p>They are attached to the <a class=\"reference internal\" href=\"../files/#files\"><span class=\"std std-ref\">File</span></a> object (<code class=\"docutils literal notranslate\"><span class=\"pre\">file.tags</span></code>)</p></li>\n<li><p>Their <code class=\"docutils literal notranslate\"><span class=\"pre\">block_id</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">start_idx</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">end_idx</span></code> are always null.</p></li>\n<li><p>They are referenced via the <code class=\"docutils literal notranslate\"><span class=\"pre\">filetag</span></code> keyword in our query system.</p></li>\n</ul>\n<p><strong>Block Tags</strong> annotate text within a <a class=\"reference internal\" href=\"../blocks/#blocks\"><span class=\"std std-ref\">Block</span></a> object:</p>\n<ul class=\"simple\">\n<li><p>They are attached to the <a class=\"reference internal\" href=\"../blocks/#blocks\"><span class=\"std std-ref\">Block</span></a> object (<code class=\"docutils literal notranslate\"><span class=\"pre\">block.tags</span></code>)</p></li>\n<li><p>Their <code class=\"docutils literal notranslate\"><span class=\"pre\">start_idx</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end_idx</span></code> fields are either both null or both non-null. If both are null, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Tag</span> <span class=\"pre\">is</span> <span class=\"pre\">assumed</span> <span class=\"pre\">to</span> <span class=\"pre\">apply</span> <span class=\"pre\">to</span> <span class=\"pre\">the</span> <span class=\"pre\">whole</span> <span class=\"pre\">``Block</span></code>. They  represent offsets into the text that is spanned by that block.</p></li>\n<li><p>They are referenced via the <code class=\"docutils literal notranslate\"><span class=\"pre\">blocktag</span></code> keyword in our <a class=\"reference internal\" href=\"../queries/#queries\"><span class=\"std std-ref\">query system</span></a>.</p></li>\n</ul>\n<p>Notes:</p>\n<ul class=\"simple\">\n<li><p>It is impossible for a tag to cover text spanning multiple blocks.</p></li>\n</ul>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["data/queries/index", "Queries", "N", "next"], ["data/blocks", "Blocks", "P", "previous"]], "sourcename": "data/tags.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Tags</a><ul>\n<li><a class=\"reference internal\" href=\"#ways-to-use-tags\">Ways to use Tags</a></li>\n<li><a class=\"reference internal\" href=\"#tag-schemas\">Tag Schemas</a></li>\n<li><a class=\"reference internal\" href=\"#block-and-file-tags\">Block and File Tags</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "data/tags", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}