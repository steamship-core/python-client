{"parents": [{"link": "../", "title": "Data Model"}], "prev": {"link": "../tags/", "title": "Tags"}, "next": {"link": "../../embedding-search/", "title": "Embedding Search Index"}, "title": "Queries", "meta": {}, "body": "<section id=\"queries\">\n<span id=\"id1\"></span><h1>Queries<a class=\"headerlink\" href=\"#queries\" title=\"Permalink to this heading\">#</a></h1>\n<p>Steamship contains a query language, <strong>ShipQL</strong>, designed to help you fetch Files, Blocks, and Tags.\nShipQL enables you to query the results of multiple AI models applied to the same text, to find files or sections identified by language AI features.</p>\n<p>ShipQL currently supports only the criteria on which objects are matched (like a SQL WHERE clause).\nIt does not yet support projection and selection (like the SQL SELECT clause).</p>\n<section id=\"usage\">\n<h2>Usage<a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this heading\">#</a></h2>\n<p>File, Block, and Tag objects are all queryable via ShipQL.\nTheir objects in the Python Client have a static <code class=\"docutils literal notranslate\"><span class=\"pre\">query</span></code> method which accepts a ShipQL string.</p>\n<p>The object type returned from that query method depends upon the object you used to call it.\nHowever the ShipQL predicates always refer to <code class=\"docutils literal notranslate\"><span class=\"pre\">Tags</span></code>.</p>\n<p>For example: executing the query <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span> <span class=\"pre\">&quot;Dave&quot;</span></code> on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Block.query</span></code> endpoint will return <code class=\"docutils literal notranslate\"><span class=\"pre\">Blocks</span></code> which have <code class=\"docutils literal notranslate\"><span class=\"pre\">Tags</span></code> which have <code class=\"docutils literal notranslate\"><span class=\"pre\">name=&quot;Dave&quot;</span></code>.</p>\n</section>\n<section id=\"language-description\">\n<h2>Language Description<a class=\"headerlink\" href=\"#language-description\" title=\"Permalink to this heading\">#</a></h2>\n<section id=\"unary-predicates\">\n<h3>Unary Predicates<a class=\"headerlink\" href=\"#unary-predicates\" title=\"Permalink to this heading\">#</a></h3>\n<p>These predicates filter unary properties of tags.</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">blocktag</span></code> - The tag is on a block</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">filetag</span></code> - The tag is on a file</p></li>\n</ul>\n</section>\n<section id=\"binary-predicates\">\n<h3>Binary Predicates<a class=\"headerlink\" href=\"#binary-predicates\" title=\"Permalink to this heading\">#</a></h3>\n<p>These predicates filter valued properties of tags.</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span> <span class=\"pre\">&quot;string&quot;</span></code> - The kind of the tag. Only equality is supported. Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span> <span class=\"pre\">&quot;ner&quot;</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">name</span> <span class=\"pre\">&quot;string&quot;</span></code> - The name of the tag. Only equality is supported. Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span> <span class=\"pre\">&quot;Dave&quot;</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">file_id</span> <span class=\"pre\">&quot;uuid</span> <span class=\"pre\">string&quot;</span></code> - The UUID of the file to which the tag belongs.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">block_id</span> <span class=\"pre\">&quot;uuid</span> <span class=\"pre\">string&quot;</span></code> - The UUID of the block to which the tag belongs.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;pathString&quot;)</span> <span class=\"pre\">&lt;op&gt;</span> <span class=\"pre\">&lt;comparisonValue&gt;</span></code> - Comparison on the value (JSON content) of the tag.  Path string is a dot-separated key path in the json content.\nComparison value is a string, numeric, or boolean literal (lowercase).  Op can be:</p>\n<ul>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code> - Equals. Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;approved&quot;)</span> <span class=\"pre\">=</span> <span class=\"pre\">true</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span></code> - Greater than or equal to. Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;confidence&quot;)</span> <span class=\"pre\">&gt;=</span> <span class=\"pre\">0.5</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> - Greater than.  Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;confidence&quot;)</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">0.5</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;=</span></code> - Less than or equal to.  Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;confidence&quot;)</span> <span class=\"pre\">&lt;=</span> <span class=\"pre\">0.5</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code> - Less than.  Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;confidence&quot;)</span> <span class=\"pre\">&lt;</span> <span class=\"pre\">0.5</span></code></p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">exists</span></code> - Exists (no comparison value required).  Ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">value(&quot;active&quot;)</span> <span class=\"pre\">exists</span></code></p></li>\n</ul>\n</li>\n</ul>\n</section>\n<section id=\"binary-relations\">\n<h3>Binary Relations<a class=\"headerlink\" href=\"#binary-relations\" title=\"Permalink to this heading\">#</a></h3>\n<p>Binary relations allow filtering on the relationship of a tag to another tag.\nAll relations require the 2nd matching tag to be distinct from the first.</p>\n<p>Using them in the query language creates the context for a second tag, which may have additional predicates and relations.\nEx: <code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span> <span class=\"pre\">&quot;foo2&quot;</span> <span class=\"pre\">and</span> <span class=\"pre\">overlaps</span> <span class=\"pre\">{</span> <span class=\"pre\">kind</span> <span class=\"pre\">&quot;bar2&quot;}</span></code> means there exists a tag of kind \u201cfoo2\u201d which overlaps a second tag of kind \u201cbar2\u201d.</p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">overlaps</span></code> - The spans of the two tags overlap, and they are in the same block.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">samespan</span></code> - The spans of the two tags match exactly, and they are in the same block.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">sameblock</span></code> - The two tags appear in the same block.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">samefile</span></code> - The two tags appear in the same file.</p></li>\n</ul>\n</section>\n<section id=\"conjunctions\">\n<h3>Conjunctions<a class=\"headerlink\" href=\"#conjunctions\" title=\"Permalink to this heading\">#</a></h3>\n<p>Conjunctions allow combinations of predicates and relations.\nThere is no order of operations between conjunctions;\ngroups of unlike conjunctions must be separated with parentheses,\nex: <code class=\"docutils literal notranslate\"><span class=\"pre\">blocktag</span> <span class=\"pre\">and</span> <span class=\"pre\">(kind</span> <span class=\"pre\">&quot;foo3&quot;</span> <span class=\"pre\">or</span> <span class=\"pre\">name</span> <span class=\"pre\">&quot;Tag6&quot;)</span></code></p>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code>- Multiple predicates or relations can be intersected with and.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code> - Multiple predicates or relations may be disjoined with or.</p></li>\n</ul>\n</section>\n<section id=\"special-predicates\">\n<h3>Special Predicates<a class=\"headerlink\" href=\"#special-predicates\" title=\"Permalink to this heading\">#</a></h3>\n<ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">all</span></code> - All may appear only at the top level of the query and must be the entire query.\nIt means to return all <code class=\"docutils literal notranslate\"><span class=\"pre\">Files</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Blocks</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">Tags</span></code>.</p></li>\n</ul>\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["embedding-search/index", "Embedding Search Index", "N", "next"], ["data/tags", "Tags", "P", "previous"]], "sourcename": "data/queries/index.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Queries</a><ul>\n<li><a class=\"reference internal\" href=\"#usage\">Usage</a></li>\n<li><a class=\"reference internal\" href=\"#language-description\">Language Description</a><ul>\n<li><a class=\"reference internal\" href=\"#unary-predicates\">Unary Predicates</a></li>\n<li><a class=\"reference internal\" href=\"#binary-predicates\">Binary Predicates</a></li>\n<li><a class=\"reference internal\" href=\"#binary-relations\">Binary Relations</a></li>\n<li><a class=\"reference internal\" href=\"#conjunctions\">Conjunctions</a></li>\n<li><a class=\"reference internal\" href=\"#special-predicates\">Special Predicates</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "data/queries/index", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12", "furo_version": "2023.03.27", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#272822", "foreground": "#f8f8f2"}}}