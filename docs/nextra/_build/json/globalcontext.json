{"embedded": false, "project": "steamship", "release": "", "version": "", "last_updated": null, "copyright": "2022, Steamship Inc.", "master_doc": "index", "root_doc": "index", "use_opensearch": "", "docstitle": "Steamship Documentation", "shorttitle": "Steamship", "show_copyright": true, "show_search_summary": true, "show_sphinx": true, "has_source": true, "show_source": true, "sourcelink_suffix": ".txt", "file_suffix": ".fjson", "link_suffix": ".html", "script_files": ["_static/documentation_options.js", "_static/jquery.js", "_static/underscore.js", "_static/_sphinx_javascript_frameworks_compat.js", "_static/doctools.js", "_static/sphinx_highlight.js", "_static/clipboard.min.js", "_static/copybutton.js", "_static/tabs.js", "_static/design-tabs.js", "_static/scripts/furo.js"], "language": "en", "css_files": ["_static/pygments.css", "_static/styles/furo.css", "_static/copybutton.css", "_static/tabs.css", "_static/design-style.1e8bd061cd6da7fc9cf755528e8ffc24.min.css", "_static/styles/furo-extensions.css"], "sphinx_version": "5.3.0", "sphinx_version_tuple": [5, 3, 0, "final", 0], "docutils_version_info": [0, 17, 1, "final", 0], "styles": ["styles/furo.css"], "style": "styles/furo.css", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "builder": "json", "parents": [], "logo": "", "favicon": "favicon.ico", "html5_doctype": true, "theme_nosidebar": "false", "theme_sidebarwidth": "230", "theme_body_min_width": "360", "theme_body_max_width": "800", "theme_navigation_with_keys": "False", "theme_enable_search_shortcuts": "True", "theme_globaltoc_collapse": "true", "theme_globaltoc_includehidden": "false", "theme_globaltoc_maxdepth": "", "theme_announcement": "", "theme_dark_css_variables": {"color-brand-primary": "#9558FC", "color-brand-content": "#F6B938"}, "theme_dark_logo": "Steamship-symbol-light.png", "theme_light_css_variables": {"color-brand-primary": "#202B45", "color-brand-content": "#9558FC", "font-stack": "Albert Sans, sans-serif", "font-stack--monospace": "Courier, monospace"}, "theme_light_logo": "Steamship-symbol-dark.png", "theme_sidebar_hide_name": "", "theme_footer_icons": [{"name": "GitHub", "url": "https://github.com/steamship-core/python-client", "html": "\n            <svg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" viewBox=\"0 0 16 16\">\n                <path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path>\n            </svg>\n        ", "class": ""}], "theme_top_of_page_button": "edit", "theme_source_repository": "https://github.com/steamship-core/python-client/", "theme_source_branch": "main", "theme_source_directory": "docs/", "theme_source_edit_link": "", "copybutton_prompt_text": "", "copybutton_prompt_is_regexp": false, "copybutton_only_copy_prompt_lines": true, "copybutton_remove_prompts": true, "copybutton_copy_empty_lines": true, "copybutton_line_continuation_character": "", "copybutton_here_doc_delimiter": "", "copybutton_image_svg": "", "copybutton_selector": "div.highlight pre", "copybutton_format_func": "function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Removes excluded text from a Node.\n *\n * @param {Node} target Node to filter.\n * @param {string} exclude CSS selector of nodes to exclude.\n * @returns {DOMString} Text from `target` with text removed.\n */\nfunction filterText(target, exclude) {\n    const clone = target.cloneNode(true);  // clone as to not modify the live DOM\n    if (exclude) {\n        // remove excluded nodes\n        clone.querySelectorAll(exclude).forEach(node => node.remove());\n    }\n    return clone.innerText;\n}\n\n// Callback when a copy button is clicked. Will be passed the node that was clicked\n// should then grab the text and replace pieces of text that shouldn't be used in output\nfunction formatCopyText(textContent, copybuttonPromptText, isRegexp = false, onlyCopyPromptLines = true, removePrompts = true, copyEmptyLines = true, lineContinuationChar = \"\", hereDocDelim = \"\") {\n    var regexp;\n    var match;\n\n    // Do we check for line continuation characters and \"HERE-documents\"?\n    var useLineCont = !!lineContinuationChar\n    var useHereDoc = !!hereDocDelim\n\n    // create regexp to capture prompt and remaining line\n    if (isRegexp) {\n        regexp = new RegExp('^(' + copybuttonPromptText + ')(.*)')\n    } else {\n        regexp = new RegExp('^(' + escapeRegExp(copybuttonPromptText) + ')(.*)')\n    }\n\n    const outputLines = [];\n    var promptFound = false;\n    var gotLineCont = false;\n    var gotHereDoc = false;\n    const lineGotPrompt = [];\n    for (const line of textContent.split('\\n')) {\n        match = line.match(regexp)\n        if (match || gotLineCont || gotHereDoc) {\n            promptFound = regexp.test(line)\n            lineGotPrompt.push(promptFound)\n            if (removePrompts && promptFound) {\n                outputLines.push(match[2])\n            } else {\n                outputLines.push(line)\n            }\n            gotLineCont = line.endsWith(lineContinuationChar) & useLineCont\n            if (line.includes(hereDocDelim) & useHereDoc)\n                gotHereDoc = !gotHereDoc\n        } else if (!onlyCopyPromptLines) {\n            outputLines.push(line)\n        } else if (copyEmptyLines && line.trim() === '') {\n            outputLines.push(line)\n        }\n    }\n\n    // If no lines with the prompt were found then just use original lines\n    if (lineGotPrompt.some(v => v === true)) {\n        textContent = outputLines.join('\\n');\n    }\n\n    // Remove a trailing newline to avoid auto-running when pasting\n    if (textContent.endsWith(\"\\n\")) {\n        textContent = textContent.slice(0, -1)\n    }\n    return textContent\n}\n", "copybutton_exclude": ".linenos"}